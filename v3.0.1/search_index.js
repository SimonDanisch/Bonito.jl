var documenterSearchIndex = {"docs":
[{"location":"components.html#Components","page":"Components","title":"Components","text":"","category":"section"},{"location":"components.html","page":"Components","title":"Components","text":"Components in Bonito are meant to be re-usable, easily shareable types and functions to create complex Bonito Apps. We invite everyone to share their Components by turning them into a Julia library.","category":"page"},{"location":"components.html","page":"Components","title":"Components","text":"There are two ways of defining components in Bonito:","category":"page"},{"location":"components.html","page":"Components","title":"Components","text":"Write a function which returns DOM objects\nOverload jsrender for a type","category":"page"},{"location":"components.html","page":"Components","title":"Components","text":"The first is a very lightweight form of defining reusable components, which should be preferred if possible.","category":"page"},{"location":"components.html","page":"Components","title":"Components","text":"But, for e.g. widgets the second form is unavoidable, since you will want to return a type that the user can register interactions with. Also, the second form is great for integrating existing types into Bonito like plot objects. How to do the latter for Plotly is described in Plotting.","category":"page"},{"location":"components.html","page":"Components","title":"Components","text":"Let's start with the simple function based components that reuses existing Bonito components:","category":"page"},{"location":"components.html","page":"Components","title":"Components","text":"using Bonito\nBonito.Page()","category":"page"},{"location":"components.html","page":"Components","title":"Components","text":"using Dates\nfunction CurrentMonth(date=now(); style=Styles(), div_attributes...)\n    current_day = Dates.day(date)\n    month = Dates.monthname(date)\n    ndays = Dates.daysinmonth(date)\n    current_day_style = Styles(style, \"background-color\" => \"gray\", \"color\" => \"white\")\n    days = map(1:ndays) do day\n        if day == current_day\n            return Card(Centered(day); style=current_day_style)\n        else\n            return Card(Centered(day); style=style)\n        end\n    end\n    grid = Grid(days...; columns=\"repeat(7, 1fr)\")\n    return DOM.div(DOM.h2(month), grid; style=Styles(\"width\" => \"400px\", \"margin\" => \"5px\"))\nend\n\n\nApp(()-> CurrentMonth())","category":"page"},{"location":"components.html","page":"Components","title":"Components","text":"Now, we could define the same kind of rendering via overloading jsrender, if a date is spliced into a DOM:","category":"page"},{"location":"components.html","page":"Components","title":"Components","text":"function Bonito.jsrender(session::Session, date::DateTime)\n    return Bonito.jsrender(session, CurrentMonth(date))\nend\nApp() do\n    DOM.div(now())\nend","category":"page"},{"location":"components.html","page":"Components","title":"Components","text":"Please note, that jsrender is not applied recursively on its own, so one needs to apply it manually on the return value. It's not needed for simple divs and other Hyperscript elements, but e.g. Styles requires a pass through jsrender to do the deduplication etc.","category":"page"},{"location":"deployment.html#Deployment","page":"Deployment","title":"Deployment","text":"","category":"section"},{"location":"deployment.html","page":"Deployment","title":"Deployment","text":"Apps can be deployed in a wide variety of scenarios.","category":"page"},{"location":"deployment.html","page":"Deployment","title":"Deployment","text":"Lets start with a very simple example app and show how to deploy that App:","category":"page"},{"location":"deployment.html","page":"Deployment","title":"Deployment","text":"using Bonito\nexample_app = App(DOM.div(\"hello world\"), title=\"hello world\")","category":"page"},{"location":"deployment.html#Server","page":"Deployment","title":"Server","text":"","category":"section"},{"location":"deployment.html","page":"Deployment","title":"Deployment","text":"# Depending on your servers setup, you may need to listen on another port or URL\n# But 0.0.0.0:80 is pretty standard for most server setups\nport = 80\nurl = \"0.0.0.0\"\nserver = Bonito.Server(example_app, url, port)","category":"page"},{"location":"deployment.html","page":"Deployment","title":"Deployment","text":"Now, you should see the webpage at http://0.0.0.0:80.","category":"page"},{"location":"deployment.html#Proxy-Julia-Hub","page":"Deployment","title":"Proxy + Julia Hub","text":"","category":"section"},{"location":"deployment.html","page":"Deployment","title":"Deployment","text":"If the server is behind a proxy, you can set the proxy like this:","category":"page"},{"location":"deployment.html","page":"Deployment","title":"Deployment","text":"server = Bonito.Server(example_app, \"0.0.0.0\", 8080; proxy_url=\"https://my-domain.de/my-app\");\n# or set it later\n# this can be handy for interactive use cases where one isn't sure which port is open, and let Bonito find a free port (which will then be different from the one created with, but is stored in `server.port`)\nserver.proxy_url = \".../$(server.port)\"","category":"page"},{"location":"deployment.html","page":"Deployment","title":"Deployment","text":"Bonito tries to do this for known environments like JuliaHub via get_server(). This will find the most common proxy setup and return a started server:","category":"page"},{"location":"deployment.html","page":"Deployment","title":"Deployment","text":"server = Bonito.get_server()\n# add a route to the server for root to point to our example app\nroute!(server, \"/\" => example_app)","category":"page"},{"location":"deployment.html","page":"Deployment","title":"Deployment","text":"The url which this site is now served on can be found via:","category":"page"},{"location":"deployment.html","page":"Deployment","title":"Deployment","text":"# Here in documenter, this will just return a localhost url\nurl_to_visit = online_url(server, \"/\")","category":"page"},{"location":"deployment.html","page":"Deployment","title":"Deployment","text":"Like this, one can also add multiple pages:","category":"page"},{"location":"deployment.html","page":"Deployment","title":"Deployment","text":"page_404 = App() do session, request\n    return DOM.div(\"no page for $(request.target)\")\nend\n# You can use string (paths), or a regex\nroute!(server, r\".*\" => page_404)\nroute!(server, \"/my/nested/page\" => App(DOM.div(\"nested\")))\nurl_to_visit = online_url(server, \"/my/nested/page\")","category":"page"},{"location":"deployment.html#nginx","page":"Deployment","title":"nginx","text":"","category":"section"},{"location":"deployment.html","page":"Deployment","title":"Deployment","text":"If you need to re-route Bonito e.g. to host in parallel to PlutoSliderServer, you want a reverse-proxy like nginx. We did some testing with nginx and the following configuration worked for us:","category":"page"},{"location":"deployment.html","page":"Deployment","title":"Deployment","text":"server {\n    listen 8080;\n    location /bonito/ {\n        proxy_pass http://localhost:8081/;\n        proxy_http_version 1.1;\n        proxy_set_header Upgrade $http_upgrade;\n        proxy_set_header Connection \"Upgrade\";\n        proxy_set_header Host $host;\n    }\n}","category":"page"},{"location":"deployment.html","page":"Deployment","title":"Deployment","text":"and the Bonito with:","category":"page"},{"location":"deployment.html","page":"Deployment","title":"Deployment","text":"    server = Server(\"127.0.0.1\", 8081;proxy_url=\"https://www.abc.org/bonito/\")\n    route!(server,\"/\"=>app) # with app an Bonito app\n    # close(server) # useful for debugging ;)","category":"page"},{"location":"deployment.html","page":"Deployment","title":"Deployment","text":"This would re-route www.abc.org:8080/bonito/ to your local Bonito-Server.","category":"page"},{"location":"deployment.html","page":"Deployment","title":"Deployment","text":"If you get errors in your browser console relating to \"GET\", \"MIME-TYPE\"","category":"page"},{"location":"deployment.html","page":"Deployment","title":"Deployment","text":"First make sure that the URL of the assets is \"correct\", that is, there is no // somewhere in the domain, and in principle the client tries to find the correct target (Server(...,verbose=1) might help to see if requests arrive).\nif the app shows up fine, but you get these errors (typically with wss:// in the front, indicating some WebSocket issue), double check that all the slashes / in your configuration are set correct. That is all these 4 paths should have /'s at the end: location /subfolder/, proxy_pass =.../  Server(...,proxy_url=\".../\") and route!(...,'/'=>app)\nIf it still doesn't work, you might need to look into WebSocket forwarding - or you might have an intermediate reverse-proxy that blocks the WebSocket.","category":"page"},{"location":"deployment.html#Heroku","page":"Deployment","title":"Heroku","text":"","category":"section"},{"location":"deployment.html","page":"Deployment","title":"Deployment","text":"Deploying to Heroku with Bonito works pretty similar to this blogpost.","category":"page"},{"location":"deployment.html","page":"Deployment","title":"Deployment","text":"mkdir my-app\ncd my-app\njulia --project=. -e 'using Pkg; Pkg.add(\"Bonito\")' # and any other dependency","category":"page"},{"location":"deployment.html","page":"Deployment","title":"Deployment","text":"then create 2 files:","category":"page"},{"location":"deployment.html","page":"Deployment","title":"Deployment","text":"app.jl:","category":"page"},{"location":"deployment.html","page":"Deployment","title":"Deployment","text":"using Bonito\n# The app you want to serve\n#  Note: you can also add more pages with `route!(server, ...)` as explained aboce\nmy_app = App(DOM.div(\"hello world\"))\nport = parse(Int, ENV[\"PORT\"])\n# needs to match `heroku create - a example-app`,\n# which we can ensure by using the env variable\n# which is only available in review app, so one needs to fill this in manually for now\n# https://devcenter.heroku.com/articles/github-integration-review-apps#injected-environment-variables\nmy_app_name = get(ENV, \"HEROKU_APP_NAME\", \"example-app\")\nurl = \"https://$(my_app_name).herokuapp.com/\"\nwait(Bonito.Server(my_app, \"0.0.0.0\", port, proxy_url=url))","category":"page"},{"location":"deployment.html","page":"Deployment","title":"Deployment","text":"Procfile:","category":"page"},{"location":"deployment.html","page":"Deployment","title":"Deployment","text":"web: julia --project=. app.jl","category":"page"},{"location":"deployment.html","page":"Deployment","title":"Deployment","text":"and then to upload the app install the heroku-cli and run as explained in the heroku git deploy section:","category":"page"},{"location":"deployment.html","page":"Deployment","title":"Deployment","text":"$ cd my-app\n$ git init\n$ git add .\n$ git commit -m \"first commit\"\n$ heroku create -a example-app\n$ heroku git:remote -a example-app","category":"page"},{"location":"deployment.html","page":"Deployment","title":"Deployment","text":"Which, after showing you the install logs, should print out the url to visit in the end. You can see the full example here:","category":"page"},{"location":"deployment.html","page":"Deployment","title":"Deployment","text":"https://github.com/SimonDanisch/Bonito-heroku","category":"page"},{"location":"deployment.html#Terminal","page":"Deployment","title":"Terminal","text":"","category":"section"},{"location":"deployment.html","page":"Deployment","title":"Deployment","text":"If no HTML display is found in the Julia display stack, Bonito calls Bonito.enable_browser_display() in the __init__ function. This adds a display, that opens a browser window to display the app. The loading of the BrowserDisplay happen in any kind of environment without html display, so this should also work in any kind of terminal or when evaluating a script.","category":"page"},{"location":"deployment.html","page":"Deployment","title":"Deployment","text":"> using JSSever\n> example_app # just let the display system display it in a browser window","category":"page"},{"location":"deployment.html#VScode","page":"Deployment","title":"VScode","text":"","category":"section"},{"location":"deployment.html","page":"Deployment","title":"Deployment","text":"VScode with enabled Plot Pane will display any Bonito.App in the HTML plotpane: (Image: )","category":"page"},{"location":"deployment.html","page":"Deployment","title":"Deployment","text":"If VSCode is used in a remote setting, VSCode may automatically forward the port so the plot pane can work out of the box. If this doesn't happen for some reason (it has been reported to not always work), you can manually forward it via the command menu (ctr+shift+p) and forward a port, or just select the PORTS tab in the terminal view.","category":"page"},{"location":"deployment.html#Notebooks","page":"Deployment","title":"Notebooks","text":"","category":"section"},{"location":"deployment.html","page":"Deployment","title":"Deployment","text":"Most common notebook systems should work out of the box.","category":"page"},{"location":"deployment.html#IJulia","page":"Deployment","title":"IJulia","text":"","category":"section"},{"location":"deployment.html","page":"Deployment","title":"Deployment","text":"(Image: )","category":"page"},{"location":"deployment.html#Jupyterlab","page":"Deployment","title":"Jupyterlab","text":"","category":"section"},{"location":"deployment.html","page":"Deployment","title":"Deployment","text":"(Image: )","category":"page"},{"location":"deployment.html#Pluto","page":"Deployment","title":"Pluto","text":"","category":"section"},{"location":"deployment.html","page":"Deployment","title":"Deployment","text":"(Image: )","category":"page"},{"location":"deployment.html#Electron","page":"Deployment","title":"Electron","text":"","category":"section"},{"location":"deployment.html","page":"Deployment","title":"Deployment","text":"using Electron, Bonito\n# Needs to be called after loading Electron\nBonito.use_electron_display()\n# display(...) can be skipped in e.g. VSCode with disabled plotpane\ndisplay(example_app)","category":"page"},{"location":"deployment.html","page":"Deployment","title":"Deployment","text":"(Image: )","category":"page"},{"location":"deployment.html","page":"Deployment","title":"Deployment","text":"note: Note\nBy default, Bonito will create the Electron window without showing the Developer Tools panel. You can control this behavior at window creation using the devtools keyword arg:display = Bonito.use_electron_display(devtools = true)Alternatively, you can toggle the Developer Tools at any later time using:Electron.toggle_devtools(display.window)","category":"page"},{"location":"deployment.html#Documenter","page":"Deployment","title":"Documenter","text":"","category":"section"},{"location":"deployment.html","page":"Deployment","title":"Deployment","text":"Bonito works in Documenter without additional setup. But, one always needs to include a block like this before any other code block displaying Bonito Apps:","category":"page"},{"location":"deployment.html","page":"Deployment","title":"Deployment","text":"using Bonito\nPage()","category":"page"},{"location":"deployment.html","page":"Deployment","title":"Deployment","text":"This is needed, since Bonito structures the dependencies and state per Page, which needs to be unique per documentation page. One can use the Bonito documentation source to see an example.","category":"page"},{"location":"deployment.html#Static-export","page":"Deployment","title":"Static export","text":"","category":"section"},{"location":"deployment.html","page":"Deployment","title":"Deployment","text":"Bonito works also to create static sites, by using Routes and export_static.","category":"page"},{"location":"deployment.html","page":"Deployment","title":"Deployment","text":"routes = Routes(\n    \"/\" => App(index_func, title=\"Makie\"),\n    \"/team\" => App(team_func, title=\"Team\"),\n    \"/contact\" => App(contact_func, title=\"Contact\"),\n    \"/support\" => App(support_func, title=\"Support\")\n)\nBonito.export_static(\"html/folder\", routes)","category":"page"},{"location":"deployment.html","page":"Deployment","title":"Deployment","text":"Please visit Static Sites for more details.","category":"page"},{"location":"deployment.html#Anything-else","page":"Deployment","title":"Anything else","text":"","category":"section"},{"location":"deployment.html","page":"Deployment","title":"Deployment","text":"Bonito overloads the display/show stack for the mime \"text/html\" so any other Software which is able to display html in Julia should work with Bonito. If a use case is not supported, please open an issue. One can also always directly call:","category":"page"},{"location":"deployment.html","page":"Deployment","title":"Deployment","text":"html_source = sprint(io-> show(io, MIME\"text/html\"(), example_app))","category":"page"},{"location":"deployment.html","page":"Deployment","title":"Deployment","text":"Do get the html source code as a string (or just write it to the io).","category":"page"},{"location":"assets.html#Assets","page":"Assets","title":"Assets","text":"","category":"section"},{"location":"assets.html","page":"Assets","title":"Assets","text":"some_file = Asset(\"path/to/local/file\")\n# ES6Module creates an Asset with the flags set appropriately to\n# treat it as a module\njsmodule = ES6Module(\"path/to/local/es6module.js\")::Asset\n\n# These assets can be interpolated into DOM elements and js strings:\njs\"\"\"\n// this will result in importing jsmodule\n// Doing this in many places will only import jsmodule once\n$(jsmodule).then(jsmodule=> {\n    // Do something with the module :)\n})\n// This will give you the raw bytes as a Uint8Array\n$(some_file).then(raw_bytes => {\n    // do something with bytes\n})\n\"\"\"\n\n# This will resolve to a valid URL depending on the used asset server\nDOM.img(src=some_file)\n\n# This will also resolve to a valid URL and load jsmodule as an es6 module\nDOM.sript(src=jsmodule, type=\"module\")\n\n# Assets also work with online sources.\n# Usage is exactly the same as when using local files\nTHREE = ES6Module(\"https://unpkg.com/three@0.136.0/build/three.js\")\n# Also offer an easy way to use packages from a CDN (currently esm.sh):\nTHREE = CDNSource(\"three\"; version=\"0.137.5\")","category":"page"},{"location":"assets.html","page":"Assets","title":"Assets","text":"using Bonito\nPage()","category":"page"},{"location":"assets.html","page":"Assets","title":"Assets","text":"# Javascript & CSS dependencies can be declared locally and\n# freely interpolated in the DOM / js string, and will make sure it loads\n# Note, that they will be a `Promise` though, so to use them you need to call `module.then(module=> ...)`.\nconst THREE = ES6Module(\"https://cdn.esm.sh/v66/three@0.136/es2021/three.js\")\n\napp = App() do session, request\n    width = 500; height = 500\n    dom = DOM.div(width = width, height = height)\n    Bonito.onload(session, dom, js\"\"\"\n        function (container){\n            $(THREE).then(THREE=> {\n                var renderer = new THREE.WebGLRenderer({antialias: true});\n                renderer.setSize($width, $height);\n                renderer.setClearColor(\"#ffffff\");\n                container.appendChild(renderer.domElement);\n                var scene = new THREE.Scene();\n                var camera = new THREE.PerspectiveCamera(75, $width / $height, 0.1, 1000);\n                camera.position.z = 4;\n                var ambientLight = new THREE.AmbientLight(0xcccccc, 0.4);\n                scene.add(ambientLight);\n                var pointLight = new THREE.PointLight(0xffffff, 0.8);\n                camera.add(pointLight);\n                scene.add(camera);\n                var geometry = new THREE.SphereGeometry(1.0, 32, 32);\n                var material = new THREE.MeshPhongMaterial({color: 0xffff00});\n                var sphere = new THREE.Mesh(geometry, material);\n                scene.add(sphere);\n                renderer.render(scene, camera);\n            })\n        }\n    \"\"\")\n    return dom\nend","category":"page"},{"location":"interactions.html#Interactions","page":"Interactions","title":"Interactions","text":"","category":"section"},{"location":"interactions.html","page":"Interactions","title":"Interactions","text":"Animations in Bonito are done via Observables.jl, much like it's the case for Makie.jl, so the same docs apply:","category":"page"},{"location":"interactions.html","page":"Interactions","title":"Interactions","text":"observables\nanimation","category":"page"},{"location":"interactions.html","page":"Interactions","title":"Interactions","text":"But lets quickly get started with a Bonito specific example:","category":"page"},{"location":"interactions.html","page":"Interactions","title":"Interactions","text":"using Bonito\nPage()","category":"page"},{"location":"interactions.html","page":"Interactions","title":"Interactions","text":"App() do session\n    s = Slider(1:3)\n    value = map(s.value) do x\n        return x ^ 2\n    end\n    # Record states is an experimental feature to record all states generated in the Julia session and allow the slider to stay interactive in the statically hosted docs!\n    return Bonito.record_states(session, DOM.div(s, value))\nend","category":"page"},{"location":"interactions.html","page":"Interactions","title":"Interactions","text":"The s.value is an Observable which can be mapp'ed to take on new values, and one can insert observables as an input to DOM.tag or as any attribute. The value of the observable will be rendered via jssrender(session, observable[]), and then updated whenever the value changes. So anything that supports being inserted into the DOM can be inside an observable, and the fallback is to use the display system (so plots etc. work as well). This way, one can also return DOM elements as the result of an observable:","category":"page"},{"location":"interactions.html","page":"Interactions","title":"Interactions","text":"App() do session\n    s = Slider(1:3)\n    # use map!(result_observable, ...)\n    # To use any as the result type, otherwise you can't return\n    # different types from the map callback\n    value = map!(Observable{Any}(), s.value) do x\n        if x == 1\n            return DOM.h1(\"hello from slider: $(x)\")\n        elseif x == 2\n            return DOM.img(src=\"https://docs.makie.org/stable/assets/makie_logo_transparent.svg\", width=\"200px\")\n        else\n            return x^2\n        end\n    end\n    return Bonito.record_states(session, DOM.div(s, value))\nend","category":"page"},{"location":"interactions.html","page":"Interactions","title":"Interactions","text":"In other words, the whole app can just be one big observable:","category":"page"},{"location":"interactions.html","page":"Interactions","title":"Interactions","text":"import Bonito.TailwindDashboard as D\nApp() do session\n    s = D.Slider(\"Slider: \", 1:3)\n    checkbox = D.Checkbox(\"Chose:\", true)\n    menu = D.Dropdown(\"Menu: \", [sin, tan, cos])\n    app = map(checkbox.widget.value, s.widget.value, menu.widget.value) do checkboxval, sliderval, menuval\n        DOM.div(checkboxval, sliderval, menuval)\n    end\n    return Bonito.record_states(session, D.FlexRow(\n        D.Card(D.FlexCol(checkbox, s, menu)),\n        D.Card(app)\n    ))\nend","category":"page"},{"location":"interactions.html","page":"Interactions","title":"Interactions","text":"Likes this one create interactive examples like this:","category":"page"},{"location":"interactions.html","page":"Interactions","title":"Interactions","text":"import Bonito.TailwindDashboard as D\n\nfunction create_svg(sl_nsamples, sl_sample_step, sl_phase, sl_radii, color)\n    width, height = 900, 300\n    cxs_unscaled = [i*sl_sample_step + sl_phase for i in 1:sl_nsamples]\n    cys = sin.(cxs_unscaled) .* height/3 .+ height/2\n    cxs = cxs_unscaled .* width/4pi\n    rr = sl_radii\n    # DOM.div/svg/etc is just a convenience in Bonito for using Hyperscript, but circle isn't wrapped like that yet\n    geom = [SVG.circle(cx=cxs[i], cy=cys[i], r=rr, fill=color(i)) for i in 1:sl_nsamples[]]\n    return SVG.svg(SVG.g(geom...);\n        width=width, height=height\n    )\nend\n\napp = App() do session\n    colors = [\"black\", \"gray\", \"silver\", \"maroon\", \"red\", \"olive\", \"yellow\", \"green\", \"lime\", \"teal\", \"aqua\", \"navy\", \"blue\", \"purple\", \"fuchsia\"]\n    color(i) = colors[i%length(colors)+1]\n    sl_nsamples = D.Slider(\"nsamples\", 1:200, value=100)\n    sl_sample_step = D.Slider(\"sample step\", 0.01:0.01:1.0, value=0.1)\n    sl_phase = D.Slider(\"phase\", 0.0:0.1:6.0, value=0.0)\n    sl_radii = D.Slider(\"radii\", 0.1:0.1:60, value=10.0)\n    svg = map(create_svg, sl_nsamples.value, sl_sample_step.value, sl_phase.value, sl_radii.value, color)\n    return DOM.div(D.FlexRow(D.FlexCol(sl_nsamples, sl_sample_step, sl_phase, sl_radii), svg))\nend","category":"page"},{"location":"interactions.html","page":"Interactions","title":"Interactions","text":"As you notice, when exporting this example to the docs which get statically hosted, all interactions requiring Julia cease to exist. One way to create interactive examples that stay active is to move the parts that need Julia to Javascript:","category":"page"},{"location":"interactions.html","page":"Interactions","title":"Interactions","text":"app = App() do session\n    colors = [\"black\", \"gray\", \"silver\", \"maroon\", \"red\", \"olive\", \"yellow\", \"green\", \"lime\", \"teal\", \"aqua\", \"navy\", \"blue\", \"purple\", \"fuchsia\"]\n    nsamples = D.Slider(\"nsamples\", 1:200, value=100)\n    nsamples.widget[] = 100\n    sample_step = D.Slider(\"sample step\", 0.01:0.01:1.0, value=0.1)\n    sample_step.widget[] = 0.1\n    phase = D.Slider(\"phase\", 0.0:0.1:6.0, value=0.0)\n    radii = D.Slider(\"radii\", 0.1:0.1:60, value=10.0)\n    radii.widget[] = 10\n    svg = DOM.div()\n    evaljs(session, js\"\"\"\n        const [width, height] = [900, 300]\n        const colors = $(colors)\n        const observables = $([nsamples.value, sample_step.value, phase.value, radii.value])\n        function update_svg(args) {\n            const [nsamples, sample_step, phase, radii] = args;\n            const svg = (tag, attr) => {\n                const el = document.createElementNS('http://www.w3.org/2000/svg', tag);\n                for (const key in attr) {\n                    el.setAttributeNS(null, key, attr[key]);\n                }\n                return el\n            }\n            const color = (i) => colors[i % colors.length]\n            const svg_node = svg('svg', {width: width, height: height});\n            for (let i=0; i<nsamples; i++) {\n                const cxs_unscaled = (i + 1) * sample_step + phase;\n                const cys = Math.sin(cxs_unscaled) * (height / 3.0) + (height / 2.0);\n                const cxs = cxs_unscaled * width / (4 * Math.PI);\n                const circle = svg('circle', {cx: cxs, cy: cys, r: radii, fill: color(i)});\n                svg_node.appendChild(circle);\n            }\n            $(svg).replaceChildren(svg_node);\n        }\n        Bonito.onany(observables, update_svg)\n        update_svg(observables.map(x=> x.value))\n        \"\"\")\n    return DOM.div(D.FlexRow(D.FlexCol(nsamples, sample_step, phase, radii), svg))\nend","category":"page"},{"location":"interactions.html","page":"Interactions","title":"Interactions","text":"This works, because the Javascript side of Bonito, will still update the observables in Javascript (which are mirrored from Julia), and therefore keep working without a running Julia process. You can use js_observable.on(value=> ....) and Bonito.onany(array_of_js_observables, values=> ...) to create interactions, pretty similar to how you would work with Observables in Julia.","category":"page"},{"location":"layouting.html#Layouting","page":"Layouting","title":"Layouting","text":"","category":"section"},{"location":"layouting.html","page":"Layouting","title":"Layouting","text":"The main layouting primitive Bonito offers is Grid, Column and Row. They are all based on css display: grid and Bonito offers a small convenience wrapper around it.","category":"page"},{"location":"layouting.html","page":"Layouting","title":"Layouting","text":"We recommend reading through the great introduction to Styles grids by Josh Comeau: interactive guide to grid, for a better understanding of how grids work. It's recommended to read this before following this tutorial, since the examples are styled much nicer and explain everything in much greater detail.","category":"page"},{"location":"layouting.html","page":"Layouting","title":"Layouting","text":"To easier apply the tutorial to Bonito, we ported all the examples of the tutorial, while only describing them with the bare minimum. To get the full picture, please refer to the linked, original tutorial!","category":"page"},{"location":"layouting.html","page":"Layouting","title":"Layouting","text":"Let's start with the docstring for Grid:","category":"page"},{"location":"layouting.html","page":"Layouting","title":"Layouting","text":"Grid","category":"page"},{"location":"layouting.html#Bonito.Grid","page":"Layouting","title":"Bonito.Grid","text":"Grid(\n    elems...;\n    gap=\"10px\",\n    width=\"100%\",\n    height=\"100%\",\n    # All below Attributes are set to the default CSS values:\n    columns=\"none\",\n    rows=\"none\",\n    areas=\"none\",\n    justify_content=\"normal\",\n    justify_items=\"legacy\",\n    align_content=\"normal\",\n    align_items=\"legacy\",\n    style::Styles=Styles(),\n    div_attributes...,\n)\n\nA Grid is a container that lays out its children in a grid, based on the powerful css display: grid property.\n\n\n\n\n\n","category":"function"},{"location":"layouting.html","page":"Layouting","title":"Layouting","text":"It pretty much just sets the css attributes to some defaults, but everything can be overwritten or extended by passing your own style=Styles(...) object. All Styles objects inside one App will be merged into a single stylesheet, so using many grids with the same keyword arguments will only generate one entry into the global stylesheet. You can read more about this in the styling section.","category":"page"},{"location":"layouting.html","page":"Layouting","title":"Layouting","text":"There's also Row and Col which uses Grid under the hood:","category":"page"},{"location":"layouting.html","page":"Layouting","title":"Layouting","text":"Row\nCol","category":"page"},{"location":"layouting.html#Bonito.Row","page":"Layouting","title":"Bonito.Row","text":"Row(elems...; grid_attributes...)\n\nPlaces objects in a row, based on Grid.\n\n\n\n\n\n","category":"function"},{"location":"layouting.html#Bonito.Col","page":"Layouting","title":"Bonito.Col","text":"Col(elems...; grid_attributes...)\n\nPlaces objects in a column, based on Grid.\n\n\n\n\n\n","category":"function"},{"location":"layouting.html","page":"Layouting","title":"Layouting","text":"using Bonito\nPage()","category":"page"},{"location":"layouting.html#Implicit-Grids","page":"Layouting","title":"Implicit Grids","text":"","category":"section"},{"location":"layouting.html","page":"Layouting","title":"Layouting","text":"If we don't specify any attributes for the Grid, the default will be one dynamic column, where every item gets their own row:","category":"page"},{"location":"layouting.html","page":"Layouting","title":"Layouting","text":"\n\nDemoCard(content=DOM.div(); style=Styles(), attributes...) = Card(content; backgroundcolor=:silver, border_radius=\"2px\", style=Styles(style, \"color\" => :white),attributes...)\n\n\nApp() do sess\n    s = Bonito.Slider(1:5)\n    cards = map(s.value) do n\n        cards = [DemoCard(height=\"50px\", width=\"300px\") for i in 1:n]\n        return Grid(cards;)\n    end\n    return Bonito.record_states(sess, Grid(s, cards))\nend","category":"page"},{"location":"layouting.html","page":"Layouting","title":"Layouting","text":"If we specify a height, while not specifying a height for the elements, the space will be partitioned for the n children:","category":"page"},{"location":"layouting.html","page":"Layouting","title":"Layouting","text":"App() do sess\n    s = Bonito.Slider(1:5)\n    cards = map(s.value) do n\n        cards = [DemoCard(width=\"300px\") for i in 1:n]\n        Grid(cards; height=\"300px\")\n    end\n    return Bonito.record_states(sess, Grid(s, cards))\nend","category":"page"},{"location":"layouting.html","page":"Layouting","title":"Layouting","text":"To introduce new columns, we can specify a width for each column via the column keyword, which supports any css unit:","category":"page"},{"location":"layouting.html","page":"Layouting","title":"Layouting","text":"App() do\n    grid = Grid(DemoCard(), DemoCard();\n        height=\"300px\", columns=\"25% 75%\")\n    return grid\nend","category":"page"},{"location":"layouting.html","page":"Layouting","title":"Layouting","text":"Grid also introduced a new css unit namely fr, which represents the fraction of the leftover space in the grid container.","category":"page"},{"location":"layouting.html","page":"Layouting","title":"Layouting","text":"To see what that means, the below example shows how the percent based unit will shrink proportionally, while fr divides the space more evenly and can take the size of the content into it's constraint solver:","category":"page"},{"location":"layouting.html","page":"Layouting","title":"Layouting","text":"App() do sess\n    container_width = Bonito.Slider(5:0.1:100)\n    container_width[] = 100\n    imstyle = Styles(\n        \"display\" => :block, \"position\" => :relative, \"width\" => \"100px\",\n        \"max-width\" => :none # needs to be set so it's not overwritten by others\n    )\n    img = DOM.img(; src=\"https://docs.makie.org/stable/assets/makie_logo_transparent.svg\", style=imstyle)\n    style = Styles(\"position\" => :relative, \"display\" => :flex, \"justify-content\" => :center, \"align-items\" => :center)\n\n\n    function example_grid(cols)\n        grid = Grid(DemoCard(img; style=style), DemoCard(DOM.div(); style=style); columns=cols)\n        container = DOM.div(grid; style=Styles(\"height\" => \"200px\", \"width\" => \"500px\"))\n        return Grid(container; rows=\"1fr\", justify_content=\"center\"), container\n    end\n    pgrid, p1 = example_grid(\"25% 75%\")\n    frgrid, p2 = example_grid(\"1fr 3fr\")\n    grid_percent = DOM.div(Grid(pgrid; rows=\"1fr\"))\n    grid_fr = DOM.div(Grid(frgrid; rows=\"1fr\"))\n\n\n    onjs(sess, container_width.value, js\"w=> {$(p1).style.width = (5 * w) + 'px';}\")\n    onjs(sess, container_width.value, js\"w=> {$(p2).style.width = (5 * w) + 'px';}\")\n    title_percent = DOM.h2(\"Grid(...; columns=\\\"25% 75%\\\")\")\n    title_fr = DOM.h2(\"Grid(...; columns=\\\"1fr 3fr\\\")\")\n    return Grid(container_width, title_percent, grid_percent, title_fr, grid_fr; columns=\"1fr\")\nend","category":"page"},{"location":"layouting.html","page":"Layouting","title":"Layouting","text":"Now, what happens if we add more then 2 items to a Grid with 2 columns?","category":"page"},{"location":"layouting.html","page":"Layouting","title":"Layouting","text":"# Little helper to create a Card with centered content\ncentered(c; style=Styles(), kw...) = DemoCard(Centered(DOM.h4(c; style=Styles(\"color\" => :white))); style=style)\n\n\nApp() do\n    cards = [centered(i) for i in 1:3]\n    grid = Grid(cards...; columns=\"1fr 3fr\")\n    return DOM.div(grid; style=Styles(\"margin\" => \"20px\"))\nend","category":"page"},{"location":"layouting.html","page":"Layouting","title":"Layouting","text":"Specifying the size of the rows works exactly the same as with columns:","category":"page"},{"location":"layouting.html","page":"Layouting","title":"Layouting","text":"App() do\n    cards = [centered(i) for i in 1:4]\n    grid = Grid(cards...; columns=\"1fr 3fr\", rows=\"5rem 1fr\")\n    return DOM.div(grid; style=Styles(\"width\" => \"400px\", \"height\" => \"300px\", \"margin\" => \"20px\"))\nend","category":"page"},{"location":"layouting.html","page":"Layouting","title":"Layouting","text":"Now, if we want to do something with lots of rows/columns, e.g. a calendar, it may get tiring to write those out, which is why css offers the repeat function:","category":"page"},{"location":"layouting.html","page":"Layouting","title":"Layouting","text":"App() do\n    cards = [centered(i) for i in 1:31]\n    grid = Grid(cards...; columns=\"repeat(7, 1fr)\")\n    return DOM.div(grid; style=Styles(\"width\" => \"400px\", \"margin\" => \"5px\"))\nend","category":"page"},{"location":"layouting.html#Assigning-children","page":"Layouting","title":"Assigning children","text":"","category":"section"},{"location":"layouting.html","page":"Layouting","title":"Layouting","text":"Children can be assigned slots in the layout explicitly, and it's also possible to assign them to multiple slots. The css syntax for this is:","category":"page"},{"location":"layouting.html","page":"Layouting","title":"Layouting","text":"start_column = 1\nend_column = 3\nstart_row = 1\nend_row = 3\n\n\nstyle = Styles(\n    \"grid-column\" => \"$start_column / $end_column\",\n    \"grid-row\" => \"$start_row / $end_row\"\n)\nchild = DOM.div(style=style) # assign child from slot 1-2","category":"page"},{"location":"layouting.html","page":"Layouting","title":"Layouting","text":"To illustrate how this works, here is an interactive app where you can select the slots in the grid, and see the corresponding grid/column assignments:","category":"page"},{"location":"layouting.html","page":"Layouting","title":"Layouting","text":"\n\nfunction centered2d(i, j;)\n    return centered(\"($i, $j)\"; dataCol=\"$i,$j\", style=Styles(\"user-select\" => :none))\nend\n\n\nApp() do\n    cards = [centered2d(i, j) for i in 1:4 for j in 1:4]\n\n\n    hover_style = Styles(\n        \"background-color\" => :blue,\n        \"opacity\" => 0.2,\n        \"z-index\" => 1,\n        \"display\" => :none,\n        \"user-select\" => :none,\n    )\n\n\n    hover = DOM.div(; style=hover_style)\n\n\n    grid_style = Styles(\"position\" => :absolute, \"top\" => 0, \"left\" => 0)\n    size = \"300px\"\n    background_grid = Grid(cards...; columns=\"repeat(4, 1fr)\", gap=\"0px\",\n        style=grid_style, height=size, width=size)\n\n\n    rows = [DOM.div() for i in 1:15]\n\n\n    selected_grid = Grid(hover, rows...; columns=\"repeat(4, 1fr)\", gap=\"0px\",\n        style=grid_style, height=size, width=size)\n\n\n    style_display = centered(\"Styles(...)\"; width=\"100%\")\n\n\n    hover_js = js\"\"\"\n        const hover = $(hover);\n        const grid = $(selected_grid);\n        const style_display = $(style_display);\n        const h2_node = style_display.children[0].children[0];\n\n\n        let is_dragging = false;\n        let start_position = null;\n        function get_element(e) {\n            const elements = document.elementsFromPoint(e.clientX, e.clientY);\n            for (let i = 0; i < elements.length; i++) {\n                const element = elements[i];\n                if (element.getAttribute('data-col')) {\n                    return element;\n                }\n            }\n            return\n        }\n\n\n        function handle_click(current) {\n            // Check if the current element is a child of the container\n            const index = current.getAttribute('data-col')\n            if (index) {\n                const start = start_position.split(\",\").map(x=> parseInt(x))\n                const end = index.split(\",\").map(x=> parseInt(x))\n\n\n                const [start_row, end_row] = [start[0], end[0]].sort()\n                const [start_col, end_col] = [start[1], end[1]].sort()\n                const row = (start_row) + \" / \" + (end_row + 1)\n                const col = (start_col) + \" / \" + (end_col + 1)\n                hover.style[\"grid-row\"] = row\n                hover.style[\"grid-column\"] = col\n                const nelems = 16 - ((end_row - start_row+ 1) * (end_col - start_col+ 1))\n                for (let i = 0; i < grid.children.length; i++) {\n                    console.log(i)\n                    const child = grid.children[i];\n                    if (child == hover) {\n                        continue\n                    }\n                    child.style.display = nelems >= i ? \"block\" : \"none\";\n                }\n\n\n                h2_node.innerText = 'Styles(\\n\\\"grid-row\\\" => \\\"' + row + '\\\",\\n \\\"grid-column\\\" => \\\"' + col + '\\\"\\n)';\n            }\n        }\n\n\n        grid.addEventListener('mousedown', (e) => {\n            if (!hover) {\n                return\n            }\n            is_dragging = true;\n            const current = get_element(e);\n            const index = current.getAttribute('data-col')\n            if (!index) {\n                return;\n            }\n            start_position = index\n            hover.style.display = \"block\"; // unhide hover element\n            handle_click(current);\n        });\n\n\n        grid.addEventListener('mousemove', (e) => {\n            if (!is_dragging) return;\n            const current = get_element(e);\n            handle_click(current);\n        });\n\n\n        document.addEventListener('mouseup', () => {\n            is_dragging = false;\n        });\n\n\n    \"\"\"\n    grids = DOM.div(background_grid, selected_grid, hover_js; style=Styles(\"position\" => :relative, \"height\" => size))\n\n\n    return Grid(style_display, grids; columns=\"1fr 2fr\", width=\"100%\")\nend","category":"page"},{"location":"layouting.html#Grid-areas","page":"Layouting","title":"Grid areas","text":"","category":"section"},{"location":"layouting.html","page":"Layouting","title":"Layouting","text":"We can now easily create complex layouts like this:","category":"page"},{"location":"layouting.html","page":"Layouting","title":"Layouting","text":"App() do\n\n\n    sidebar = DemoCard(\n        \"SIDEBAR\",\n        style = Styles(\n            \"grid-column\" =>  \"1\",\n            \"grid-row\" =>  \"1 / 3\",\n        )\n    )\n\n\n    header = DemoCard(\n        \"HEADER\",\n        style = Styles(\n            \"grid-column\" =>  \"2\",\n            \"grid-row\" =>  \"1\",\n        )\n    )\n\n\n    main = DemoCard(\n        \"MAIN\",\n        style = Styles(\n            \"grid-column\" =>  \"2\",\n            \"grid-row\" =>  \"2\",\n        )\n    )\n\n\n    grid = Grid(\n        sidebar, header, main,\n        columns = \"2fr 5fr\",\n        rows = \"50px 1fr\"\n    )\n    return DOM.div(grid; style=Styles(\"height\" => \"600px\", \"margin\" => \"20px\", \"position\" => :relative))\nend","category":"page"},{"location":"layouting.html","page":"Layouting","title":"Layouting","text":"With areas, in css grid-template-areas this can be made even simpler:","category":"page"},{"location":"layouting.html","page":"Layouting","title":"Layouting","text":"App() do\n\n\n    sidebar = DemoCard(\n        \"SIDEBAR\",\n        style = Styles(\"grid-area\" =>  \"sidebar\")\n    )\n\n\n    header = DemoCard(\n        \"HEADER\",\n        style = Styles(\"grid-area\" =>  \"header\")\n    )\n\n\n    main = DemoCard(\n        \"MAIN\",\n        style = Styles(\"grid-area\" =>  \"main\")\n    )\n\n\n    grid = Grid(\n        sidebar, header, main,\n        columns = \"2fr 5fr\",\n        rows = \"50px 1fr\",\n        areas = \"\"\"\n            'sidebar header'\n            'sidebar main';\n        \"\"\"\n    )\n    return DOM.div(grid; style=Styles(\"height\" => \"600px\", \"margin\" => \"20px\", \"position\" => :relative))\nend","category":"page"},{"location":"layouting.html","page":"Layouting","title":"Layouting","text":"The syntax is quite similar to Julia's matrix syntax, just wrapping all rows into '...row...'! To span multiple rows or columns, the name can be repeated multiple times.","category":"page"},{"location":"layouting.html#Alignment","page":"Layouting","title":"Alignment","text":"","category":"section"},{"location":"layouting.html","page":"Layouting","title":"Layouting","text":"App() do\n    grid = Grid(\n        DemoCard(), DemoCard(),\n        columns = \"90px 90px\",\n    )\n    return DOM.div(grid; style=Styles(\"height\" => \"200px\", \"margin\" => \"20px\", \"position\" => :relative, \"background-color\" => \"#F88379\", \"padding\" => \"5px\"))\nend","category":"page"},{"location":"layouting.html","page":"Layouting","title":"Layouting","text":"App() do session\n    justification = Bonito.Dropdown([\"space-evenly\", \"center\", \"end\", \"space-between\", \"space-around\", \"space-evenly\"], style=Styles(\"width\" => \"200px\"))\n\n\n    grid = Grid(\n        DemoCard(), DemoCard(),\n        columns = \"90px 90px\"\n    )\n    onjs(session, justification.option_index, js\"\"\" (idx) => {\n        grid = $(grid)\n        grid.style[\"justify-content\"] = $(justification.options[])[idx-1]\n    }\"\"\")\n    area_style = Styles(\"height\" => \"200px\", \"width\" => \"600px\", \"margin\" => \"20px\", \"position\" => :relative, \"background-color\" => \"#F88379\", \"padding\" => \"5px\")\n    grid_area = DOM.div(grid; style=area_style)\n    return Grid(justification, grid_area; justify_items=\"center\")\nend","category":"page"},{"location":"layouting.html","page":"Layouting","title":"Layouting","text":"App() do session\n    content = Bonito.Dropdown([\"space-evenly\", \"center\", \"end\", \"space-between\", \"space-around\"])\n    items = Bonito.Dropdown([\"stretch\", \"start\", \"center\", \"end\"])\n    grid = Grid(\n        DemoCard(), DemoCard(),\n        DemoCard(), DemoCard(),\n        columns = \"90px 90px\"\n    )\n    onjs(session, content.option_index, js\"\"\" (idx) => {\n        grid = $(grid)\n        const val = $(content.options[])[idx-1]\n        grid.style[\"justify-content\"] = val\n    }\"\"\")\n    onjs(session, items.option_index, js\"\"\" (idx) => {\n        grid = $(grid)\n        const val = $(items.options[])[idx-1]\n        grid.style[\"justify-items\"] = val\n    }\"\"\")\n    grid_area = DOM.div(grid; style=Styles(\"height\" => \"200px\", \"width\" => \"600px\", \"margin\" => \"20px\", \"position\" => :relative, \"background-color\" => \"#F88379\", \"padding\" => \"5px\",\n        \"grid-column\" => \"1 / 3\", \"grid-row\" => \"2\"))\n    return Grid(content, items, grid_area; width=\"500px\", justify_items=\"space-around\")\nend","category":"page"},{"location":"layouting.html","page":"Layouting","title":"Layouting","text":"App() do session\n    content = Bonito.Dropdown([\"space-evenly\", \"center\", \"end\", \"space-between\", \"space-around\"])\n    items = Bonito.Dropdown([\"stretch\", \"start\", \"center\", \"end\"])\n    align_content = Bonito.Dropdown([\"space-evenly\", \"center\", \"end\", \"space-between\", \"space-around\"])\n    align_items = Bonito.Dropdown([\"stretch\", \"start\", \"center\", \"end\"])\n    grid_style = Styles(\"position\" => :absolute, \"top\" => 0, \"left\" => 0)\n    grid = Grid(\n        centered(\"One\"), centered(\"Two\"),\n        centered(\"Three\"), centered(\"Four\"),\n        columns = \"100px 100px\",\n        rows = \"100px 100px\",\n        style=grid_style\n    )\n\n\n    grid_col() = DOM.div(style=Styles(\"border\" => \"2px dashed white\", \"width\"=>\"100px\"))\n    grid_row() = DOM.div(style=Styles(\"border\" => \"2px dashed white\", \"height\"=>\"100px\"))\n\n\n    shadow_cols = Grid(\n        grid_col(), grid_col(),\n        columns = \"100px 100px\",\n        style=grid_style\n    )\n    shadow_rows = Grid(\n        grid_row(), grid_row(),\n        rows = \"100px 100px\",\n        style=grid_style\n    )\n\n\n    onjs(session, content.option_index, js\"\"\" (idx) => {\n        const grids = [$(grid), $(shadow_cols)]\n        const val = $(content.options[])[idx-1]\n        grids.forEach(x=> x.style[\"justify-content\"] = val)\n    }\"\"\")\n\n\n    onjs(session, items.option_index, js\"\"\" (idx) => {\n        const grids = [$(grid), $(shadow_cols)]\n        const val = $(items.options[])[idx-1]\n        grids.forEach(x=> x.style[\"justify-items\"] = val)\n    }\"\"\")\n\n\n    onjs(session, align_content.option_index, js\"\"\" (idx) => {\n        const grids = [$(grid), $(shadow_rows)]\n        const val = $(align_content.options[])[idx-1]\n        grids.forEach(x=> x.style[\"align-content\"] = val)\n    }\"\"\")\n\n\n    onjs(session, align_items.option_index, js\"\"\" (idx) => {\n        const grids = [$(grid), $(shadow_rows)]\n        const val = $(align_items.options[])[idx-1]\n        grids.forEach(x=> x.style[\"align-items\"] = val)\n    }\"\"\")\n\n\n    grid_area = DOM.div(grid, shadow_cols, shadow_rows; style=Styles(\n        \"height\" => \"400px\", \"width\" => \"400px\",\n        \"margin\" => \"20px\",\n        \"padding\" => \"5px\",\n        \"position\" => :relative,\n        \"background-color\" => \"#F88379\",\n        \"grid-column\" => \"1 / 3\", \"grid-row\" => \"4\"))\n\n\n    text(t) = DOM.div(t; style=Styles(\"font-size\" => \"1.3rem\", \"font-weight\" => \"bold\"))\n    final_grid = Grid(\n        text(\"Row Alignment\"), text(\"Col Justification\"),\n        align_content, content,\n        align_items, items,\n        grid_area;\n        rows = \"2rem 1rem 2rem 1fr\",\n        align_items = \"center\",\n        justify_items=\"begin\", justify_content=\"center\",\n        width=\"400px\")\n\n\n    return DOM.div(final_grid, style=Styles(\"padding\" => \"20px\"))\nend","category":"page"},{"location":"styling.html#Styling","page":"Styling","title":"Styling","text":"","category":"section"},{"location":"styling.html#Basics","page":"Styling","title":"Basics","text":"","category":"section"},{"location":"styling.html","page":"Styling","title":"Styling","text":"using Bonito\nPage()","category":"page"},{"location":"styling.html","page":"Styling","title":"Styling","text":"The main type to style the DOM via css is Style:","category":"page"},{"location":"styling.html","page":"Styling","title":"Styling","text":"Styles","category":"page"},{"location":"styling.html#Bonito.Styles-styling","page":"Styling","title":"Bonito.Styles","text":"Styles(css::CSS...)\n\nCreates a Styles object, which represents a Set of CSS objects. You can insert the Styles object into a DOM node, and it will be rendered as a <style> node. If you assign it directly to DOM.div(style=Style(...)), the styling will be applied to the specific div. Note, that per Session, each unique css object in all Styles across the session will only be rendered once. This makes it easy to create Styling inside of components, while not worrying about creating lots of Style nodes on the page. There are a two more convenience constructors to make Styles a bit easier to use:\n\nStyles(pairs::Pair...) = Styles(CSS(pairs...))\nStyles(priority::Styles, defaults...) = merge(Styles(defaults...), priority)\n\nFor styling components, it's recommended, to always allow user to merge in customizations of a Style, like this:\n\nfunction MyComponent(; style=Styles())\n    return DOM.div(style=Styles(style, \"color\" => \"red\"))\nend\n\nAll Bonito components are stylable this way.\n\ninfo: Info\nWhy not Hyperscript.Style? While the scoped styling via Hyperscript.Style is great, it makes it harder to create stylable components, since it doesn't allow the deduplication of CSS objects across the session. It's also significantly slower, since it's not as specialized on the deduplication and the camelcase keyword to css attribute conversion is pretty costly. That's also why CSS uses pairs of strings instead of keyword arguments.\n\n\n\n\n\n","category":"type"},{"location":"styling.html#Using-CSS-and-pseudo-classes","page":"Styling","title":"Using CSS and pseudo classes","text":"","category":"section"},{"location":"styling.html","page":"Styling","title":"Styling","text":"The CSS object allows to specify a selector, which will be used to apply the styling to a specific DOM node. Since the main usage is to apply the Style object to a DOM node, the selector is usually empty and we use it mainly for pseudo classes like :hover:","category":"page"},{"location":"styling.html","page":"Styling","title":"Styling","text":"App() do session\n    return DOM.div(\n        \"This turns red on hover\",\n        style=Styles(\n            CSS(\":hover\", \"color\" => \"red\", \"text-size\" => \"2rem\")\n        )\n    )\nend","category":"page"},{"location":"styling.html","page":"Styling","title":"Styling","text":"A more involved example is the style we use for Button:","category":"page"},{"location":"styling.html","page":"Styling","title":"Styling","text":"App() do\n    style = Styles(\n        CSS(\n            \"font-weight\" => 600,\n            \"border-width\" => \"1px\",\n            \"border-color\" => \"#9CA3AF\",\n            \"border-radius\" => \"0.25rem\",\n            \"padding-left\" => \"0.75rem\",\n            \"padding-right\" => \"0.75rem\",\n            \"padding-top\" => \"0.25rem\",\n            \"padding-bottom\" => \"0.25rem\",\n            \"margin\" => \"0.25rem\",\n            \"cursor\" => \"pointer\",\n            \"min-width\" => \"8rem\",\n            \"font-size\" => \"1rem\",\n            \"background-color\" => \"white\",\n            \"box-shadow\" => \"rgba(0, 0, 0, 0) 0px 0px 0px 0px, rgba(0, 0, 0, 0) 0px 0px 0px 0px, rgba(0, 0, 0, 0.1) 0px 1px 3px 0px, rgba(0, 0, 0, 0.1) 0px 1px 2px -1px\";\n        ),\n        CSS(\n            \":hover\",\n            \"background-color\" => \"#F9FAFB\",\n            \"box-shadow\" => \"rgba(0, 0, 0, 0) 0px 0px 0px 0px\",\n        ),\n        CSS(\n            \":focus\",\n            \"outline\" => \"1px solid transparent\",\n            \"outline-offset\" => \"1px\",\n            \"box-shadow\" => \"rgba(66, 153, 225, 0.5) 0px 0px 0px 1px\",\n        ),\n    )\n    return DOM.div(\"Hello\", style=style)\nend","category":"page"},{"location":"styling.html","page":"Styling","title":"Styling","text":"If we merged a complex Style like the above with a user given Styles object, it will merge all CSS objects with the same selector, allowing to easily overwrite all styling attributes.","category":"page"},{"location":"styling.html","page":"Styling","title":"Styling","text":"This is how one can style a Button:","category":"page"},{"location":"styling.html","page":"Styling","title":"Styling","text":"App() do\n    style = Styles(\n        CSS(\"font-weight\" => \"500\"),\n        CSS(\":hover\", \"background-color\" => \"silver\"),\n        CSS(\":focus\", \"box-shadow\" => \"rgba(0, 0, 0, 0.5) 0px 0px 5px\"),\n    )\n    button = Button(\"Click me\"; style=style)\n    return button\nend","category":"page"},{"location":"styling.html#Using-Styles-as-global-Stylesheet","page":"Styling","title":"Using Styles as global Stylesheet","text":"","category":"section"},{"location":"styling.html","page":"Styling","title":"Styling","text":"One can also define a global stylesheet with Styles using selectors to style parts of an HTML document. This can be handy to set some global styling, but please be careful, since this will affect the whole document. That's also why we need to set a specific attribute selector for all, to not affect the whole documentation page. This will not happen when assigning a style to DOM.div(style=Styles(...)), which will always just apply to that particular div and any other div assigned to. Note, that a style object directly inserted into the DOM will be rendered exactly where it occurs without deduplication!","category":"page"},{"location":"styling.html","page":"Styling","title":"Styling","text":"App() do\n    style = Styles(\n        CSS(\"*[our-style]\", \"font-style\" => \"italic\"),\n        CSS(\"p[our-style]\", \"color\" => \"red\"),\n        CSS(\".myClass[our-style]\", \"text-decoration\" => \"underline\"),\n        CSS(\"#myId[our-style]\", \"font-family\" => \"monospace\"),\n        CSS(\"p.myClass#myId[our-style]\", \"font-size\" => \"1.5rem\")\n    )\n    return DOM.div(\n        style,\n        DOM.div(ourStyle=1,\n            DOM.p(class=\"myClass\", id=\"myId\", \"I match everything.\", ourStyle=1),\n            DOM.p(\"I match the universal and type selectors only.\", ourStyle=1)\n        )\n    )\nend","category":"page"},{"location":"api.html#Api","page":"Api","title":"Api","text":"","category":"section"},{"location":"api.html#Public-Functions","page":"Api","title":"Public Functions","text":"","category":"section"},{"location":"api.html","page":"Api","title":"Api","text":"Modules = [Bonito]\nOrder   = [:module, :constant, :type, :function, :macro]\nPublic  = true\nPrivate = false","category":"page"},{"location":"api.html#Bonito.App","page":"Api","title":"Bonito.App","text":"App(callback_or_dom; title=\"Bonito App\")\nApp((session, request) -> DOM.div(...))\nApp((session::Session) -> DOM.div(...))\nApp((request::HTTP.Request) -> DOM.div(...))\nApp(() -> DOM.div(...))\nApp(DOM.div(...))\n\nUsage:\n\nusing Bonito\napp = App() do\n    return DOM.div(DOM.h1(\"hello world\"), js\"\"\"console.log('hello world')\"\"\")\nend\n\nIf you depend on global observable, make sure to bind it to the session. This is pretty important, since every time you display the app, listeners will get registered to it, that will just continue staying there until your Julia process gets closed. bind_global prevents that by binding the observable to the life cycle of the session and cleaning up the state after the app isn't displayed anymore. If you serve the App via a Server, be aware, that those globals will be shared with everyone visiting the page, so possibly by many users concurrently.\n\nglobal some_observable = Observable(\"global hello world\")\nApp() do session::Session\n    bound_global = bind_global(session, some_observable)\n    return DOM.div(bound_global)\nend\n\n\n\n\n\n","category":"type"},{"location":"api.html#Bonito.Asset","page":"Api","title":"Bonito.Asset","text":"Represent an asset stored at an URL. We try to always have online & local files for assets\n\n\n\n\n\n","category":"type"},{"location":"api.html#Bonito.CodeEditor-Tuple{String}","page":"Api","title":"Bonito.CodeEditor","text":"CodeEditor(language::String; initial_source=\"\", theme=\"chrome\", editor_options...)\n\nDefaults for editor_options:\n\n(\n    autoScrollEditorIntoView = true,\n    copyWithEmptySelection = true,\n    wrapBehavioursEnabled = true,\n    useSoftTabs = true,\n    enableMultiselect = true,\n    showLineNumbers = false,\n    fontSize = 16,\n    wrap = 80,\n    mergeUndoDeltas = \"always\"\n)\n\n\n\n\n\n","category":"method"},{"location":"api.html#Bonito.Dropdown","page":"Api","title":"Bonito.Dropdown","text":"Dropdown(options; index=1, option_to_string=string, style=Styles(), dom_attributes...)\n\nA simple Dropdown, which can be styled via the style::Styles attribute.\n\nExample\n\nApp() do\n    style = Styles(\n        CSS(\"font-weight\" => \"500\"),\n        CSS(\":hover\", \"background-color\" => \"silver\"),\n        CSS(\":focus\", \"box-shadow\" => \"rgba(0, 0, 0, 0.5) 0px 0px 5px\"),\n    )\n    dropdown = Dropdown([\"a\", \"b\", \"c\"]; index=2, style=style)\n    on(dropdown.value) do value\n        @info value\n    end\n    return dropdown\nend\n\n\n\n\n\n\n","category":"type"},{"location":"api.html#Bonito.NoServer","page":"Api","title":"Bonito.NoServer","text":"We don't serve files and include anything directly as raw bytes. Interpolating the same asset many times, will only upload the file to JS one time though.\n\n\n\n\n\n","category":"type"},{"location":"api.html#Bonito.Session","page":"Api","title":"Bonito.Session","text":"A web session with a user\n\n\n\n\n\n","category":"type"},{"location":"api.html#Bonito.StylableSlider-Union{Tuple{AbstractVector{T}}, Tuple{T}} where T","page":"Api","title":"Bonito.StylableSlider","text":"StylableSlider(\n    range::AbstractVector;\n    value=first(range),\n    slider_height=15,\n    thumb_width=slider_height,\n    thumb_height=slider_height,\n    track_height=slider_height / 2,\n    track_active_height=track_height + 2,\n    backgroundcolor=\"transparent\",\n    track_color=\"#eee\",\n    track_active_color=\"#ddd\",\n    thumb_color=\"#fff\",\n    style::Styles=Styles(),\n    track_style::Styles=Styles(),\n    thumb_style::Styles=Styles(),\n    track_active_style::Styles=Styles(),\n)\n\nCreates a Stylable Slider, where the basic attributes are easily custimizable via keyword arguments, while the more advanced details can be styled via the style, track_style, thumb_style and track_active_style arguments with the whole might of CSS. This does not use <input type=\"range\"> but is a custom implementation using <div>s javascript, since it is not easily possible to style the native slider in a cross-browser way. For using pure HTML sliders, use Bonito.Slider.\n\nExample\n\nApp() do\n    Bonito.StylableSlider(\n        1:10;\n        value=5,\n        slider_height=20,\n        track_color=\"lightblue\",\n        track_active_color=\"#F0F8FF\",\n        thumb_color=\"#fff\",\n        style=Styles(\n            CSS(\"hover\", \"background-color\" => \"lightgray\"),\n            CSS(\"border-radius\" => \"0px\"),\n        ),\n        track_style=Styles(\n            \"border-radius\" => \"3px\",\n            \"border\" => \"1px solid black\",\n        ),\n        thumb_style=Styles(\n            \"border-radius\" => \"3px\",\n            \"border\" => \"1px solid black\",\n        ),\n    )\nend\n\n\n\n\n\n\n","category":"method"},{"location":"api.html#Bonito.Styles","page":"Api","title":"Bonito.Styles","text":"Styles(css::CSS...)\n\nCreates a Styles object, which represents a Set of CSS objects. You can insert the Styles object into a DOM node, and it will be rendered as a <style> node. If you assign it directly to DOM.div(style=Style(...)), the styling will be applied to the specific div. Note, that per Session, each unique css object in all Styles across the session will only be rendered once. This makes it easy to create Styling inside of components, while not worrying about creating lots of Style nodes on the page. There are a two more convenience constructors to make Styles a bit easier to use:\n\nStyles(pairs::Pair...) = Styles(CSS(pairs...))\nStyles(priority::Styles, defaults...) = merge(Styles(defaults...), priority)\n\nFor styling components, it's recommended, to always allow user to merge in customizations of a Style, like this:\n\nfunction MyComponent(; style=Styles())\n    return DOM.div(style=Styles(style, \"color\" => \"red\"))\nend\n\nAll Bonito components are stylable this way.\n\ninfo: Info\nWhy not Hyperscript.Style? While the scoped styling via Hyperscript.Style is great, it makes it harder to create stylable components, since it doesn't allow the deduplication of CSS objects across the session. It's also significantly slower, since it's not as specialized on the deduplication and the camelcase keyword to css attribute conversion is pretty costly. That's also why CSS uses pairs of strings instead of keyword arguments.\n\n\n\n\n\n","category":"type"},{"location":"api.html#Bonito.WebSocketConnection-Tuple{Any, HTTP.WebSockets.WebSocket}","page":"Api","title":"Bonito.WebSocketConnection","text":"handles a new websocket connection to a session\n\n\n\n\n\n","category":"method"},{"location":"api.html#WidgetsBase.Button","page":"Api","title":"WidgetsBase.Button","text":"Button(name; style=Styles(), dom_attributes...)\n\nA simple button, which can be styled a style::Styles.\n\nExample\n\nApp() do\n    style = Styles(\n        CSS(\"font-weight\" => \"500\"),\n        CSS(\":hover\", \"background-color\" => \"silver\"),\n        CSS(\":focus\", \"box-shadow\" => \"rgba(0, 0, 0, 0.5) 0px 0px 5px\"),\n    )\n    button = Button(\"Click me\"; style=style)\n    on(button.value) do click::Bool\n        @info \"Button clicked!\"\n    end\n    return button\nend\n\n\n\n\n\n\n","category":"type"},{"location":"api.html#WidgetsBase.NumberInput","page":"Api","title":"WidgetsBase.NumberInput","text":"NumberInput(default_value; style=Styles(), dom_attributes...)\n\nA simple NumberInput, which can be styled via the style::Styles attribute.\n\nExample\n\nApp() do\n    style = Styles(\n        CSS(\"font-weight\" => \"500\"),\n        CSS(\":hover\", \"background-color\" => \"silver\"),\n        CSS(\":focus\", \"box-shadow\" => \"rgba(0, 0, 0, 0.5) 0px 0px 5px\"),\n    )\n    numberinput = NumberInput(0.0; style=style)\n    on(numberinput.value) do value::Float64\n        @info value\n    end\n    return numberinput\nend\n\n\n\n\n\n\n","category":"type"},{"location":"api.html#WidgetsBase.TextField","page":"Api","title":"WidgetsBase.TextField","text":"TextField(default_text; style=Styles(), dom_attributes...)\n\nA simple TextField, which can be styled via the style::Styles attribute.\n\nExample\n\nApp() do\n    style = Styles(\n        CSS(\"font-weight\" => \"500\"),\n        CSS(\":hover\", \"background-color\" => \"silver\"),\n        CSS(\":focus\", \"box-shadow\" => \"rgba(0, 0, 0, 0.5) 0px 0px 5px\"),\n    )\n    textfield = TextField(\"write something\"; style=style)\n    on(textfield.value) do text::String\n        @info text\n    end\n    return textfield\nend\n\n\n\n\n\n\n","category":"type"},{"location":"api.html#Bonito.Card-Tuple{Any}","page":"Api","title":"Bonito.Card","text":"Card(\n    content;\n    style::Styles=Styles(),\n    backgroundcolor=RGBA(1, 1, 1, 0.2),\n    shadow_size=\"0 4px 8px\",\n    padding=\"12px\",\n    margin=\"2px\",\n    shadow_color=RGBA(0, 0, 0.2, 0.2),\n    width=\"auto\",\n    height=\"auto\",\n    border_radius=\"10px\",\n    div_attributes...,\n)\n\nA Card is a container with a shadow and rounded corners. It is a good way to group elements together and make them stand out from the background. One can easily style them via the above keyword arguments or via the style argument with any CSS attribute.\n\nExample\n\n    App() do\n        Card(\n            DOM.h1(\"This is a card\");\n            width=\"200px\",\n            height=\"200px\",\n            backgroundcolor=\"white\",\n            shadow_size=\"0 0 10px\",\n            shadow_color=\"blue\",\n            padding=\"20px\",\n            margin=\"20px\",\n            border_radius=\"20px\",\n            style = Styles(\n                CSS(\"hover\", \"background-color\" => \"lightgray\")\n            )\n        )\n    end\n\n\n\n\n\n\n","category":"method"},{"location":"api.html#Bonito.Centered-Tuple{Any}","page":"Api","title":"Bonito.Centered","text":"Centered(content; style=Styles(), grid_attributes...)\n\nCreates an element where the content is centered via Grid.\n\n\n\n\n\n","category":"method"},{"location":"api.html#Bonito.Col-Tuple","page":"Api","title":"Bonito.Col","text":"Col(elems...; grid_attributes...)\n\nPlaces objects in a column, based on Grid.\n\n\n\n\n\n","category":"method"},{"location":"api.html#Bonito.Grid-Tuple","page":"Api","title":"Bonito.Grid","text":"Grid(\n    elems...;\n    gap=\"10px\",\n    width=\"100%\",\n    height=\"100%\",\n    # All below Attributes are set to the default CSS values:\n    columns=\"none\",\n    rows=\"none\",\n    areas=\"none\",\n    justify_content=\"normal\",\n    justify_items=\"legacy\",\n    align_content=\"normal\",\n    align_items=\"legacy\",\n    style::Styles=Styles(),\n    div_attributes...,\n)\n\nA Grid is a container that lays out its children in a grid, based on the powerful css display: grid property.\n\n\n\n\n\n","category":"method"},{"location":"api.html#Bonito.Labeled-Tuple{Any, Any}","page":"Api","title":"Bonito.Labeled","text":"Labeled(object, label; label_style=Styles(), attributes...)\n\nA Labeled container with a simople layout to put a label next to an object.\n\nApp() do\n    label_style = Styles(\n        \"color\" => \"white\",\n        \"padding\" => \"3px\",\n        \"font-size\" => \"1.5rem\",\n        \"text-shadow\" => \"0px 0px 10px black, 1px 1px 3px black\")\n    slider = StylableSlider(1:10)\n    Card(Labeled(slider, slider.value; label_style=label_style, width=\"auto\"); backgroundcolor=\"gray\")\nend\n\n\n\n\n\n\n","category":"method"},{"location":"api.html#Bonito.Page-Tuple{}","page":"Api","title":"Bonito.Page","text":"Page(;\n    offline=false, exportable=true,\n    connection::Union{Nothing, FrontendConnection}=nothing,\n    server_config...\n)\n\nA Page can be used for resetting the Bonito state in a multi page display outputs, like it's the case for Pluto/IJulia/Documenter. For Documenter, the page needs to be set to exportable=true, offline=true, but doesn't need to, since Page defaults to the most common parameters for known Packages. Exportable has the effect of inlining all data & js dependencies, so that everything can be loaded in a single HTML object. offline=true will make the Page not even try to connect to a running Julia process, which makes sense for the kind of static export we do in Documenter. For convenience, one can also pass additional server configurations, which will directly get put into configure_server!(;server_config...). Have a look at the docs for configure_server! to see the parameters.\n\n\n\n\n\n","category":"method"},{"location":"api.html#Bonito.Row-Tuple","page":"Api","title":"Bonito.Row","text":"Row(elems...; grid_attributes...)\n\nPlaces objects in a row, based on Grid.\n\n\n\n\n\n","category":"method"},{"location":"api.html#Bonito.configure_server!-Tuple{}","page":"Api","title":"Bonito.configure_server!","text":"configure_server!(;\n        listen_url::String=SERVER_CONFIGURATION.listen_url[],\n        listen_port::Integer=SERVER_CONFIGURATION.listen_port[],\n        forwarded_port::Integer=listen_port,\n        proxy_url=nothing,\n        content_delivery_url=nothing\n    )\n\nConfigures the parameters for the automatically started server.\n\nParameters:\n\n* listen_url=SERVER_CONFIGURATION.listen_url[]\n    The address the server listens to.\n    must be 0.0.0.0, 127.0.0.1, ::, ::1, or localhost.\n    If not set differently by an ENV variable, will default to 127.0.0.1\n\n* listen_port::Integer=SERVER_CONFIGURATION.listen_port[],\n    The Port to which the default server listens to\n    If not set differently by an ENV variable, will default to 9384\n\n* forwarded_port::Integer=listen_port,\n    if port gets forwarded to some other port, set it here!\n\n* proxy_url=nothing\n    The url from which the server is reachable.\n    If served on \"127.0.0.1\", this will default to http://localhost:forwarded_port\n    if listen_url is \"0.0.0.0\", this will default to http://$(Sockets.getipaddr()):forwarded_port\n    so that the server is reachable inside the local network.\n    If the server should be reachable from some external dns server,\n    this needs to be set here.\n\n\n\n\n\n","category":"method"},{"location":"api.html#Bonito.evaljs-Tuple{Session, Bonito.JSCode}","page":"Api","title":"Bonito.evaljs","text":"evaljs(session::Session, jss::JSCode)\n\nEvaluate a javascript script in session.\n\n\n\n\n\n","category":"method"},{"location":"api.html#Bonito.evaljs_value-Tuple{Session, Any}","page":"Api","title":"Bonito.evaljs_value","text":"evaljs_value(session::Session, js::JSCode)\n\nEvals js code and returns the jsonified value. Blocks until value is returned. May block indefinitely, when called with a session that doesn't have a connection to the browser.\n\n\n\n\n\n","category":"method"},{"location":"api.html#Bonito.export_static-Tuple{String, App}","page":"Api","title":"Bonito.export_static","text":"export_static(html_file::Union{IO, String}, app::App)\nexport_static(folder::String, routes::Routes)\n\nExports the app defined by app with all its assets a single HTML file. Or exports all routes defined by routes to folder.\n\n\n\n\n\n","category":"method"},{"location":"api.html#Bonito.interactive_server","page":"Api","title":"Bonito.interactive_server","text":"interactive_server(f, paths, modules=[]; url=\"127.0.0.1\", port=8081, all=true)\n\nRevise base server that will serve a static side based on Bonito and will update on any code change!\n\nUsage:\n\nusing Revise, Website\nusing Website.Bonito\n\n# Start the interactive server and develop your website!\nroutes, task, server = interactive_server(Website.asset_paths()) do\n    return Routes(\n        \"/\" => App(index, title=\"Makie\"),\n        \"/team\" => App(team, title=\"Team\"),\n        \"/contact\" => App(contact, title=\"Contact\"),\n        \"/support\" => App(support, title=\"Support\")\n    )\nend\n\n# Once everything looks goo, export the static site\ndir = joinpath(@__DIR__, \"docs\")\n# only delete the bonito generated files\nrm(joinpath(dir, \"bonito\"); recursive=true, force=true)\nBonito.export_static(dir, routes)\n\nFor the complete code, visit the Makie website repository which is using Bonito: MakieOrg/Website\n\n\n\n\n\n","category":"function"},{"location":"api.html#Bonito.linkjs-Tuple{Session, Observable, Observable}","page":"Api","title":"Bonito.linkjs","text":"linkjs(session::Session, a::Observable, b::Observable)\n\nfor an open session, link a and b on the javascript side. This will also Link the observables in Julia, but only as long as the session is active.\n\n\n\n\n\n","category":"method"},{"location":"api.html#Bonito.onjs-Tuple{Session, Observable, Bonito.JSCode}","page":"Api","title":"Bonito.onjs","text":"onjs(session::Session, obs::Observable, func::JSCode)\n\nRegister a javascript function with session, that get's called when obs gets a new value. If the observable gets updated from the JS side, the calling of func will be triggered entirely in javascript, without any communication with the Julia session.\n\n\n\n\n\n","category":"method"},{"location":"api.html#Private-Functions","page":"Api","title":"Private Functions","text":"","category":"section"},{"location":"api.html","page":"Api","title":"Api","text":"Modules = [Bonito]\nOrder   = [:module, :constant, :type, :function, :macro]\nPublic  = false\nPrivate = true","category":"page"},{"location":"api.html#Bonito.FrontendConnection","page":"Api","title":"Bonito.FrontendConnection","text":"Inteface for FrontendConnection\n\nstruct MyConnection <: FrontendConnection\nend\n\nNeeds to have a constructor with 0 arguments:\n\nMyConnection()\n\nNeeds to overload Base.write for sending binary data\n\nBase.write(connection::MyConnection, bytes::AbstractVector{UInt8})\n\nNeeds to implement isopen to indicate status of connection\n\nBase.isopen(c::MyConnection)\n\nSetup connection will be called before rendering any dom with session. The return value will be inserted into the DOM of the rendered App and can be used to do the JS part of opening the connection.\n\nBonito.setup_connection(session::Session{IJuliaConnection})::Union{JSCode, Nothing}\n\nOne can overload use_parent_session, to turn on rendering dom objects inside sub-sessions while keeping one parent session managing the connection alive. This is handy for IJulia/Pluto, since the parent session just needs to be initialized one time and can stay active and globally store objects used multiple times across doms.\n\nBonito.use_parent_session(::Session{MyConnection}) = false/false\n\n\n\n\n\n","category":"type"},{"location":"api.html#Bonito.JSCode","page":"Api","title":"Bonito.JSCode","text":"Javascript code that supports interpolation of Julia Objects. Construction of JSCode via string macro:\n\njsc = js\"console.log($(some_julia_variable))\"\n\nThis will decompose into:\n\njsc.source == [JSString(\"console.log(\"), some_julia_variable, JSString(\"\"\")]\n\n\n\n\n\n","category":"type"},{"location":"api.html#Bonito.JSException-Tuple{Session, AbstractDict}","page":"Api","title":"Bonito.JSException","text":"Creates a Julia exception from data passed to us by the frondend!\n\n\n\n\n\n","category":"method"},{"location":"api.html#Bonito.JSString","page":"Api","title":"Bonito.JSString","text":"The string part of JSCode.\n\n\n\n\n\n","category":"type"},{"location":"api.html#Bonito.JSUpdateObservable","page":"Api","title":"Bonito.JSUpdateObservable","text":"Functor to update JS part when an observable changes. We make this a Functor, so we can clearly identify it and don't sent any updates, if the JS side requires to update an Observable (so we don't get an endless update cycle)\n\n\n\n\n\n","category":"type"},{"location":"api.html#Bonito.Table","page":"Api","title":"Bonito.Table","text":"A simple wrapper for types that conform to the Tables.jl Table interface, which gets rendered nicely!\n\n\n\n\n\n","category":"type"},{"location":"api.html#Bonito.Label-Tuple{Any}","page":"Api","title":"Bonito.Label","text":"Label(value; style=Styles(), attributes...)\n\nA Label is a simple text element, with a bold font and a font size of 1rem.\n\n\n\n\n\n","category":"method"},{"location":"api.html#Bonito.add_cached!-Tuple{Function, Session, Dict{String, Any}, Any}","page":"Api","title":"Bonito.add_cached!","text":"add_cached!(create_cached_object::Function, session::Session, message_cache::Dict{String, Any}, key::String)\n\nChecks if key is already cached by the session or it's root session (we skip any child session between root -> this session). If not cached already, we call create_cached_object to create a serialized form of the object corresponding to key and cache it. We return nothing if already cached, or the serialized object if not cached. We also handle the part of adding things to the message_cache from the serialization context.\n\n\n\n\n\n","category":"method"},{"location":"api.html#Bonito.dependency_path-Tuple","page":"Api","title":"Bonito.dependency_path","text":"dependency_path(paths...)\n\nPath to serve downloaded dependencies\n\n\n\n\n\n","category":"method"},{"location":"api.html#Bonito.export_standalone-Tuple{App, String}","page":"Api","title":"Bonito.export_standalone","text":"export_standaloneexport_standalone(\n    app::App, folder::String;\n    clear_folder=false, write_index_html=true,\n    absolute_urls=false, content_delivery_url=\"file://\" * folder * \"/\",\n    single_html=false)\n\nExports the app defined by app::Application with all its assets to folder. Will write the main html out into folder/index.html. Overwrites all existing files! If this gets served behind a proxy, set absolute_urls=true and set content_delivery_url to your proxy url. If clear_folder=true all files in folder will get deleted before exporting again! single_html=true will write out a single html instead of writing out JS depencies as separate files.\n\n\n\n\n\n","category":"method"},{"location":"api.html#Bonito.getextension-Tuple{AbstractString}","page":"Api","title":"Bonito.getextension","text":"getextension(path)\n\nGet the file extension of the path. The extension is defined to be the bit after the last dot, excluding any query string.\n\nExamples\n\njulia> Bonito.getextension(\"foo.bar.js\")\n\"js\"\njulia> Bonito.getextension(\"https://my-cdn.net/foo.bar.css?version=1\")\n\"css\"\n\nTaken from WebIO.jl\n\n\n\n\n\n","category":"method"},{"location":"api.html#Bonito.is_online-Tuple{AbstractString}","page":"Api","title":"Bonito.is_online","text":"is_online(path)\n\nDetermine whether or not the specified path is a local filesystem path (and not a remote resource that is hosted on, for example, a CDN).\n\n\n\n\n\n","category":"method"},{"location":"api.html#Bonito.jsrender-Tuple{Session, Union{Number, String, Symbol}}","page":"Api","title":"Bonito.jsrender","text":"jsrender([::Session], x::Any)\n\nInternal render method to create a valid dom. Registers used observables with a session And makes sure the dom only contains valid elements. Overload jsrender(::YourType) To enable putting YourType into a dom element/div. You can also overload it to take a session as first argument, to register messages with the current web session (e.g. via onjs).\n\n\n\n\n\n","category":"method"},{"location":"api.html#Bonito.on_document_load-Tuple{Session, Bonito.JSCode}","page":"Api","title":"Bonito.on_document_load","text":"on_document_load(session::Session, js::JSCode)\n\nexecutes javascript after document is loaded\n\n\n\n\n\n","category":"method"},{"location":"api.html#Bonito.onload-Tuple{Session, Hyperscript.Node, Bonito.JSCode}","page":"Api","title":"Bonito.onload","text":"onload(session::Session, node::Node, func::JSCode)\n\ncalls javascript func with node, once node has been displayed.\n\n\n\n\n\n","category":"method"},{"location":"api.html#Bonito.page_html-Tuple{IO, Session, Union{App, Hyperscript.Node}}","page":"Api","title":"Bonito.page_html","text":"page_html(session::Session, html_body)\n\nEmbeds the html_body in a standalone html document!\n\n\n\n\n\n","category":"method"},{"location":"api.html#Bonito.process_message-Tuple{Session, AbstractVector{UInt8}}","page":"Api","title":"Bonito.process_message","text":"process_message(session::Session, bytes::AbstractVector{UInt8})\n\nHandles the incoming websocket messages from the frontend. Messages are expected to be gzip compressed and packed via MsgPack.\n\n\n\n\n\n","category":"method"},{"location":"api.html#Bonito.record_states-Tuple{Session, Hyperscript.Node}","page":"Api","title":"Bonito.record_states","text":"record_states(session::Session, dom::Hyperscript.Node)\n\nRecords the states of all widgets in the dom. Any widget that implements the following interface will be found in the DOM and can be recorded:\n\n# Implementing interface for Bonito.Slider!\nis_widget(::Slider) = true\nvalue_range(slider::Slider) = 1:length(slider.values[])\nto_watch(slider::Slider) = slider.index # the observable that will trigger JS state change\n\nwarn: Warn\nThis is experimental and might change in the future! It can also create really large HTML files, since it needs to record all combinations of widget states. It's also not well optimized yet and may create a lot of duplicated messages.\n\n\n\n\n\n","category":"method"},{"location":"api.html#Bonito.register_asset_server!-Union{Tuple{C}, Tuple{Function, Type{C}}} where C<:Bonito.AbstractAssetServer","page":"Api","title":"Bonito.register_asset_server!","text":"register_asset_server!(condition::Function, ::Type{<: AbstractAssetServer})\n\nRegisters a new asset server type. condition is a function that should return nothing, if the asset server type shouldn't be used, and an initialized asset server object, if the conditions are right. E.g. The Bonito.NoServer be used inside an IJulia notebook so it's registered like this:\n\nregister_asset_server!(NoServer) do\n    if isdefined(Main, :IJulia)\n        return NoServer()\n    end\n    return nothing\nend\n\nThe last asset server registered takes priority, so if you register a new connection last in your Package, and always return it, You will overwrite the connection type for any other package. If you want to force usage temporary, try:\n\nforce_asset_server(YourAssetServer()) do\n    ...\nend\n# which is the same as:\nforce_asset_server!(YourAssetServer())\n...\nforce_asset_server!()\n\n\n\n\n\n","category":"method"},{"location":"api.html#Bonito.register_connection!-Union{Tuple{C}, Tuple{Function, Type{C}}} where C<:Bonito.FrontendConnection","page":"Api","title":"Bonito.register_connection!","text":"register_connection!(condition::Function, ::Type{<: FrontendConnection})\n\nRegisters a new Connection type.\n\ncondition is a function that should return nothing, if the connection type shouldn't be used, and an initialized Connection, if the conditions are right. E.g. The IJulia connection should only be used inside an IJulia notebook so it's registered like this:\n\nregister_connection!(IJuliaConnection) do\n    if isdefined(Main, :IJulia)\n        return IJuliaConnection()\n    end\n    return nothing\nend\n\nThe last connection registered take priority, so if you register a new connection last in your Package, and always return it, You will overwrite the connection type for any other package. If you want to force usage temporary, try:\n\nforce_connection(YourConnectionType()) do\n    ...\nend\n# which is the same as:\nforce_connection!(YourConnectionType())\n...\nforce_connection!()\n\n\n\n\n\n","category":"method"},{"location":"api.html#Bonito.replace_expressions-Tuple{Session, Any}","page":"Api","title":"Bonito.replace_expressions","text":"replace_expressions(markdown, context)\n\nReplaces all expressions inside markdown savely, by only supporting getindex/getfield expression that will index into context\n\n\n\n\n\n","category":"method"},{"location":"api.html#Bonito.set_cleanup_time!-Tuple{Real}","page":"Api","title":"Bonito.set_cleanup_time!","text":"set_cleanup_time!(time_in_hrs::Real)\n\nSets the time that sessions remain open after the browser tab is closed. This allows reconnecting to the same session. Only works for Websocket connection inside VSCode right now, and will display the same App again from first display. State that isn't stored in Observables inside that app is lost.\n\n\n\n\n\n","category":"method"},{"location":"api.html#Bonito.string_to_markdown-Tuple{Session, String}","page":"Api","title":"Bonito.string_to_markdown","text":"string_to_markdown(session::Session, source::String; eval_julia_code=false)\n\nReplaces all interpolation expressions inside markdown savely, by only supporting getindex/getfield expression that will index into context. You can eval Julia code blocks by setting eval_julia_code to a Module, into which the code gets evaluated!\n\n\n\n\n\n","category":"method"},{"location":"api.html#Bonito.update_nocycle!-Tuple{Observable, Any}","page":"Api","title":"Bonito.update_nocycle!","text":"Update the value of an observable, without sending changes to the JS frontend. This will be used to update updates from the forntend.\n\n\n\n\n\n","category":"method"},{"location":"api.html#Sockets.send-Tuple{Session}","page":"Api","title":"Sockets.send","text":"send(session::Session; attributes...)\n\nSend values to the frontend via JSON for now\n\n\n\n\n\n","category":"method"},{"location":"api.html","page":"Api","title":"Api","text":"Modules = [Bonito.HTTPServer]\nOrder   = [:module, :constant, :type, :function, :macro]\nPublic  = true\nPrivate = true","category":"page"},{"location":"api.html#Bonito.HTTPServer.Server","page":"Api","title":"Bonito.HTTPServer.Server","text":"HTTP server with websocket & http routes\n\n\n\n\n\n","category":"type"},{"location":"api.html#Bonito.HTTPServer.Server-Tuple{String, Int64}","page":"Api","title":"Bonito.HTTPServer.Server","text":"Server(         dom, url::String, port::Int;         verbose = -1     )\n\nCreates an application that manages the global server state!\n\n\n\n\n\n","category":"method"},{"location":"api.html#Base.wait-Tuple{Server}","page":"Api","title":"Base.wait","text":"wait(server::Server)\n\nWait on the server task, i.e. block execution by bringing the server event loop to the foreground.\n\n\n\n\n\n","category":"method"},{"location":"api.html#Bonito.HTTPServer.browser_display-Tuple{}","page":"Api","title":"Bonito.HTTPServer.browser_display","text":"browser_display()\n\nForces Bonito.App to be displayed in a browser window that gets opened.\n\n\n\n\n\n","category":"method"},{"location":"api.html#Bonito.HTTPServer.local_url-Tuple{Server, Any}","page":"Api","title":"Bonito.HTTPServer.local_url","text":"local_url(server::Server, url)\n\nThe local url to reach the server, on the server\n\n\n\n\n\n","category":"method"},{"location":"api.html#Bonito.HTTPServer.online_url-Tuple{Server, Any}","page":"Api","title":"Bonito.HTTPServer.online_url","text":"online_url(server::Server, url)\n\nThe url to connect to the server from the internet. Needs to have server.proxy_url set to the IP or dns route of the server\n\n\n\n\n\n","category":"method"},{"location":"api.html#Bonito.HTTPServer.tryrun-Tuple{Cmd}","page":"Api","title":"Bonito.HTTPServer.tryrun","text":"tryrun(cmd::Cmd)\n\nTry to run a command. Return true if cmd runs and is successful (exits with a code of 0). Return false otherwise.\n\n\n\n\n\n","category":"method"},{"location":"static.html#Static-Sites","page":"Static Sites","title":"Static Sites","text":"","category":"section"},{"location":"static.html","page":"Static Sites","title":"Static Sites","text":"There are several ways to generate static sites with Bonito. The main one is:","category":"page"},{"location":"static.html","page":"Static Sites","title":"Static Sites","text":"export_static","category":"page"},{"location":"static.html#Bonito.export_static","page":"Static Sites","title":"Bonito.export_static","text":"export_static(html_file::Union{IO, String}, app::App)\nexport_static(folder::String, routes::Routes)\n\nExports the app defined by app with all its assets a single HTML file. Or exports all routes defined by routes to folder.\n\n\n\n\n\n","category":"function"},{"location":"static.html","page":"Static Sites","title":"Static Sites","text":"The simplest one, which also allows an interactive Revise based workflow is enabled by interactive_server:","category":"page"},{"location":"static.html","page":"Static Sites","title":"Static Sites","text":"interactive_server","category":"page"},{"location":"static.html#Bonito.interactive_server","page":"Static Sites","title":"Bonito.interactive_server","text":"interactive_server(f, paths, modules=[]; url=\"127.0.0.1\", port=8081, all=true)\n\nRevise base server that will serve a static side based on Bonito and will update on any code change!\n\nUsage:\n\nusing Revise, Website\nusing Website.Bonito\n\n# Start the interactive server and develop your website!\nroutes, task, server = interactive_server(Website.asset_paths()) do\n    return Routes(\n        \"/\" => App(index, title=\"Makie\"),\n        \"/team\" => App(team, title=\"Team\"),\n        \"/contact\" => App(contact, title=\"Contact\"),\n        \"/support\" => App(support, title=\"Support\")\n    )\nend\n\n# Once everything looks goo, export the static site\ndir = joinpath(@__DIR__, \"docs\")\n# only delete the bonito generated files\nrm(joinpath(dir, \"bonito\"); recursive=true, force=true)\nBonito.export_static(dir, routes)\n\nFor the complete code, visit the Makie website repository which is using Bonito: MakieOrg/Website\n\n\n\n\n\n","category":"function"},{"location":"static.html","page":"Static Sites","title":"Static Sites","text":"When exporting interactions defined within Julia not using Javascript, one can use, to cache all interactions:","category":"page"},{"location":"static.html","page":"Static Sites","title":"Static Sites","text":"Bonito.record_states","category":"page"},{"location":"static.html#Bonito.record_states","page":"Static Sites","title":"Bonito.record_states","text":"record_states(session::Session, dom::Hyperscript.Node)\n\nRecords the states of all widgets in the dom. Any widget that implements the following interface will be found in the DOM and can be recorded:\n\n# Implementing interface for Bonito.Slider!\nis_widget(::Slider) = true\nvalue_range(slider::Slider) = 1:length(slider.values[])\nto_watch(slider::Slider) = slider.index # the observable that will trigger JS state change\n\nwarn: Warn\nThis is experimental and might change in the future! It can also create really large HTML files, since it needs to record all combinations of widget states. It's also not well optimized yet and may create a lot of duplicated messages.\n\n\n\n\n\n","category":"function"},{"location":"javascript-libraries.html#Javascript","page":"Wrapping JS libraries","title":"Javascript","text":"","category":"section"},{"location":"javascript-libraries.html#Wrapping-Javascript-Libraries","page":"Wrapping JS libraries","title":"Wrapping Javascript Libraries","text":"","category":"section"},{"location":"javascript-libraries.html","page":"Wrapping JS libraries","title":"Wrapping JS libraries","text":"using Bonito\nBonito.Page()","category":"page"},{"location":"javascript-libraries.html","page":"Wrapping JS libraries","title":"Wrapping JS libraries","text":"leafletjs = Bonito.ES6Module(\"https://esm.sh/v133/leaflet@1.9.4/es2022/leaflet.mjs\")\nleafletcss = Bonito.Asset(\"https://unpkg.com/leaflet@1.9.4/dist/leaflet.css\")\nstruct LeafletMap\n    position::NTuple{2,Float64}\n    zoom::Int\nend\n\nfunction Bonito.jsrender(session::Session, map::LeafletMap)\n\n    map_div = DOM.div(id=\"map\"; style=\"height: 500px;\")\n\n    return Bonito.jsrender(session, DOM.div(\n        leafletcss,\n        leafletjs,\n        map_div,\n        js\"\"\"\n            $(leafletjs).then(L=> {\n                const map = L.map('map').setView($(map.position), $(map.zoom));\n                L.tileLayer(\n                    'https://tile.openstreetmap.org/{z}/{x}/{y}.png', {\n                    maxZoom: 19,\n                    attribution: '&copy; <a href=\"http://www.openstreetmap.org/copyright\">OpenStreetMap</a>'\n                }).addTo(map);\n            })\n\n        \"\"\"\n    ))\nend\n\n\nApp() do\n    return LeafletMap((51.505, -0.09), 13)\nend","category":"page"},{"location":"extending.html#Extending-Bonito","page":"Extending","title":"Extending Bonito","text":"","category":"section"},{"location":"extending.html#Connection","page":"Extending","title":"Connection","text":"","category":"section"},{"location":"extending.html","page":"Extending","title":"Extending","text":"By default, Bonito uses its own WebSocket server to create the connection between Julia and JavaScript. By extending Bonito.FrontendConnection, you can create a new type of connection, e.g. using WebRTC to connect Julia and JavaScript.","category":"page"},{"location":"extending.html","page":"Extending","title":"Extending","text":"Your new connection type should support bidirectional messages of binary data. ","category":"page"},{"location":"extending.html","page":"Extending","title":"Extending","text":"using Bonito\nBonito.Page()","category":"page"},{"location":"extending.html","page":"Extending","title":"Extending","text":"mutable struct MyConnection <: Bonito.FrontendConnection\n    # TODO: your implementation here\n    isopen::Bool\n    socket\n    blabla\n    ...\nend\n\nfunction MyConnection()\n    # If you need to do something like start an HTTP server, you can do it here, synchronously.\n    \n    \n    return new(\n        true,\n        ...\n    )\nend\n\nfunction Base.write(connection::MyConnection, binary)\n    # TODO: send the data to JavaScript\n    write(connection.socket, binary)\nend\n\nBase.isopen(connection::MyConnection) = connection.isopen\nBase.close(connection::MyConnection) = (connection.isopen = false)\nopen!(connection::MyConnection) = (connection.isopen = true)\n\nfunction setup_connection(session::Session{MyConnection})\n    # If you need to do something specific for this new session, you can do it here.\n\n    return js\"\"\"\n    // TODO: create a connection\n    create_connection(...).then((conn) => {\n        \n        // TODO: when your connection receives a message from Julia, relay the message to `Bonito.process_message(msg)`.\n        conn.on_msg((msg) => {\n            Bonito.process_message(msg)\n        });\n        \n        // TODO: you need to define a JavaScript function that sends a given `binary_data` to Julia. On the Julia side, this should call `Bonito.process_message(connection.parent, binary_data)`.\n        const send_to_julia = (binary_data) => conn.send(binary)\n        \n        // TODO: does your connection use Pako compression on its incoming and outgoing messages?\n        const compression_enabled = false\n        \n        // Register your new connection\n        Bonito.on_connection_open(send_to_julia, compression_enabled);\n    })\n    \"\"\"\nend","category":"page"},{"location":"extending.html","page":"Extending","title":"Extending","text":"You can test your new connection like so:","category":"page"},{"location":"extending.html","page":"Extending","title":"Extending","text":"Bonito.register_connection!(MyConnection) do\n    # you can make this registration conditional, e.g. only use the new connection type on Thursdays...\n    if i_want_to_use_it\n        return MyConnection()\n    else\n        return nothing\n    end\nend","category":"page"},{"location":"widgets.html#Widgets","page":"Widgets","title":"Widgets","text":"","category":"section"},{"location":"widgets.html","page":"Widgets","title":"Widgets","text":"using Bonito\nPage()","category":"page"},{"location":"widgets.html#All-Available-widgets","page":"Widgets","title":"All Available widgets","text":"","category":"section"},{"location":"widgets.html","page":"Widgets","title":"Widgets","text":"Button","category":"page"},{"location":"widgets.html#WidgetsBase.Button-widgets","page":"Widgets","title":"WidgetsBase.Button","text":"Button(name; style=Styles(), dom_attributes...)\n\nA simple button, which can be styled a style::Styles.\n\nExample\n\nApp() do\n    style = Styles(\n        CSS(\"font-weight\" => \"500\"),\n        CSS(\":hover\", \"background-color\" => \"silver\"),\n        CSS(\":focus\", \"box-shadow\" => \"rgba(0, 0, 0, 0.5) 0px 0px 5px\"),\n    )\n    button = Button(\"Click me\"; style=style)\n    on(button.value) do click::Bool\n        @info \"Button clicked!\"\n    end\n    return button\nend\n\n\n\n\n\n\n","category":"type"},{"location":"widgets.html","page":"Widgets","title":"Widgets","text":"include_string(@__MODULE__, Bonito.BUTTON_EXAMPLE) # hide","category":"page"},{"location":"widgets.html","page":"Widgets","title":"Widgets","text":"TextField","category":"page"},{"location":"widgets.html#WidgetsBase.TextField-widgets","page":"Widgets","title":"WidgetsBase.TextField","text":"TextField(default_text; style=Styles(), dom_attributes...)\n\nA simple TextField, which can be styled via the style::Styles attribute.\n\nExample\n\nApp() do\n    style = Styles(\n        CSS(\"font-weight\" => \"500\"),\n        CSS(\":hover\", \"background-color\" => \"silver\"),\n        CSS(\":focus\", \"box-shadow\" => \"rgba(0, 0, 0, 0.5) 0px 0px 5px\"),\n    )\n    textfield = TextField(\"write something\"; style=style)\n    on(textfield.value) do text::String\n        @info text\n    end\n    return textfield\nend\n\n\n\n\n\n\n","category":"type"},{"location":"widgets.html","page":"Widgets","title":"Widgets","text":"include_string(@__MODULE__, Bonito.TEXTFIELD_EXAMPLE) # hide","category":"page"},{"location":"widgets.html","page":"Widgets","title":"Widgets","text":"NumberInput","category":"page"},{"location":"widgets.html#WidgetsBase.NumberInput-widgets","page":"Widgets","title":"WidgetsBase.NumberInput","text":"NumberInput(default_value; style=Styles(), dom_attributes...)\n\nA simple NumberInput, which can be styled via the style::Styles attribute.\n\nExample\n\nApp() do\n    style = Styles(\n        CSS(\"font-weight\" => \"500\"),\n        CSS(\":hover\", \"background-color\" => \"silver\"),\n        CSS(\":focus\", \"box-shadow\" => \"rgba(0, 0, 0, 0.5) 0px 0px 5px\"),\n    )\n    numberinput = NumberInput(0.0; style=style)\n    on(numberinput.value) do value::Float64\n        @info value\n    end\n    return numberinput\nend\n\n\n\n\n\n\n","category":"type"},{"location":"widgets.html","page":"Widgets","title":"Widgets","text":"include_string(@__MODULE__, Bonito.NUMBERINPUT_EXAMPLE) # hide","category":"page"},{"location":"widgets.html","page":"Widgets","title":"Widgets","text":"Dropdown","category":"page"},{"location":"widgets.html#Bonito.Dropdown-widgets","page":"Widgets","title":"Bonito.Dropdown","text":"Dropdown(options; index=1, option_to_string=string, style=Styles(), dom_attributes...)\n\nA simple Dropdown, which can be styled via the style::Styles attribute.\n\nExample\n\nApp() do\n    style = Styles(\n        CSS(\"font-weight\" => \"500\"),\n        CSS(\":hover\", \"background-color\" => \"silver\"),\n        CSS(\":focus\", \"box-shadow\" => \"rgba(0, 0, 0, 0.5) 0px 0px 5px\"),\n    )\n    dropdown = Dropdown([\"a\", \"b\", \"c\"]; index=2, style=style)\n    on(dropdown.value) do value\n        @info value\n    end\n    return dropdown\nend\n\n\n\n\n\n\n","category":"type"},{"location":"widgets.html","page":"Widgets","title":"Widgets","text":"include_string(@__MODULE__, Bonito.DROPDOWN_EXAMPLE) # hide","category":"page"},{"location":"widgets.html","page":"Widgets","title":"Widgets","text":"Card","category":"page"},{"location":"widgets.html#Bonito.Card","page":"Widgets","title":"Bonito.Card","text":"Card(\n    content;\n    style::Styles=Styles(),\n    backgroundcolor=RGBA(1, 1, 1, 0.2),\n    shadow_size=\"0 4px 8px\",\n    padding=\"12px\",\n    margin=\"2px\",\n    shadow_color=RGBA(0, 0, 0.2, 0.2),\n    width=\"auto\",\n    height=\"auto\",\n    border_radius=\"10px\",\n    div_attributes...,\n)\n\nA Card is a container with a shadow and rounded corners. It is a good way to group elements together and make them stand out from the background. One can easily style them via the above keyword arguments or via the style argument with any CSS attribute.\n\nExample\n\n    App() do\n        Card(\n            DOM.h1(\"This is a card\");\n            width=\"200px\",\n            height=\"200px\",\n            backgroundcolor=\"white\",\n            shadow_size=\"0 0 10px\",\n            shadow_color=\"blue\",\n            padding=\"20px\",\n            margin=\"20px\",\n            border_radius=\"20px\",\n            style = Styles(\n                CSS(\"hover\", \"background-color\" => \"lightgray\")\n            )\n        )\n    end\n\n\n\n\n\n\n","category":"function"},{"location":"widgets.html","page":"Widgets","title":"Widgets","text":"include_string(@__MODULE__, Bonito.CARD_EXAMPLE) # hide","category":"page"},{"location":"widgets.html","page":"Widgets","title":"Widgets","text":"StylableSlider","category":"page"},{"location":"widgets.html#Bonito.StylableSlider","page":"Widgets","title":"Bonito.StylableSlider","text":"StylableSlider(\n    range::AbstractVector;\n    value=first(range),\n    slider_height=15,\n    thumb_width=slider_height,\n    thumb_height=slider_height,\n    track_height=slider_height / 2,\n    track_active_height=track_height + 2,\n    backgroundcolor=\"transparent\",\n    track_color=\"#eee\",\n    track_active_color=\"#ddd\",\n    thumb_color=\"#fff\",\n    style::Styles=Styles(),\n    track_style::Styles=Styles(),\n    thumb_style::Styles=Styles(),\n    track_active_style::Styles=Styles(),\n)\n\nCreates a Stylable Slider, where the basic attributes are easily custimizable via keyword arguments, while the more advanced details can be styled via the style, track_style, thumb_style and track_active_style arguments with the whole might of CSS. This does not use <input type=\"range\"> but is a custom implementation using <div>s javascript, since it is not easily possible to style the native slider in a cross-browser way. For using pure HTML sliders, use Bonito.Slider.\n\nExample\n\nApp() do\n    Bonito.StylableSlider(\n        1:10;\n        value=5,\n        slider_height=20,\n        track_color=\"lightblue\",\n        track_active_color=\"#F0F8FF\",\n        thumb_color=\"#fff\",\n        style=Styles(\n            CSS(\"hover\", \"background-color\" => \"lightgray\"),\n            CSS(\"border-radius\" => \"0px\"),\n        ),\n        track_style=Styles(\n            \"border-radius\" => \"3px\",\n            \"border\" => \"1px solid black\",\n        ),\n        thumb_style=Styles(\n            \"border-radius\" => \"3px\",\n            \"border\" => \"1px solid black\",\n        ),\n    )\nend\n\n\n\n\n\n\n","category":"type"},{"location":"widgets.html","page":"Widgets","title":"Widgets","text":"include_string(@__MODULE__, Bonito.STYLABLE_SLIDER_EXAMPLE) # hide","category":"page"},{"location":"widgets.html#Widgets-in-Layouts","page":"Widgets","title":"Widgets in Layouts","text":"","category":"section"},{"location":"widgets.html","page":"Widgets","title":"Widgets","text":"There are a few helpers to e.g. put a label next to a widget:","category":"page"},{"location":"widgets.html","page":"Widgets","title":"Widgets","text":"Labeled","category":"page"},{"location":"widgets.html#Bonito.Labeled","page":"Widgets","title":"Bonito.Labeled","text":"Labeled(object, label; label_style=Styles(), attributes...)\n\nA Labeled container with a simople layout to put a label next to an object.\n\nApp() do\n    label_style = Styles(\n        \"color\" => \"white\",\n        \"padding\" => \"3px\",\n        \"font-size\" => \"1.5rem\",\n        \"text-shadow\" => \"0px 0px 10px black, 1px 1px 3px black\")\n    slider = StylableSlider(1:10)\n    Card(Labeled(slider, slider.value; label_style=label_style, width=\"auto\"); backgroundcolor=\"gray\")\nend\n\n\n\n\n\n\n","category":"function"},{"location":"widgets.html","page":"Widgets","title":"Widgets","text":"include_string(@__MODULE__, Bonito.LABELED_EXAMPLE) # hide","category":"page"},{"location":"widgets.html","page":"Widgets","title":"Widgets","text":"To create more complex layouts, one should use e.g. Grid, and visit the Layouting tutorial.","category":"page"},{"location":"widgets.html","page":"Widgets","title":"Widgets","text":"\nApp() do session\n    s = Bonito.StylableSlider(0:10;)\n    d = Dropdown([\"a\", \"b\", \"c\"])\n    ni = NumberInput(10.0)\n    ti = Bonito.TextField(\"helo\")\n    button = Button(\"click\")\n    clicks = Observable(0)\n    on(session, button.value) do bool\n        clicks[] = clicks[] + 1\n    end\n    return Card(Grid(\n            button, Bonito.Label(clicks),\n            s, Bonito.Label(s.value),\n            d, Bonito.Label(d.value),\n            ni, Bonito.Label(ni.value),\n            ti, Bonito.Label(ti.value);\n            columns=\"1fr min-content\",\n            justify_content=\"begin\",\n            align_items=\"center\",\n        ); width=\"300px\",)\nend","category":"page"},{"location":"widgets.html#Editor","page":"Widgets","title":"Editor","text":"","category":"section"},{"location":"widgets.html","page":"Widgets","title":"Widgets","text":"This editor works in pure Javascript, so feel free to try out editing the Javascript and clicking eval to see how the output changes. In Bonito/examples/editor.jl, you will find a version that works with Julia code, but that requires a running Julia server of course.","category":"page"},{"location":"widgets.html","page":"Widgets","title":"Widgets","text":"using Bonito, Observables\nsrc = \"\"\"\n(() => {\n    const canvas = document.createElement(\"canvas\");\n    const context = canvas.getContext('2d');\n    const width = 500\n    const height = 400\n    canvas.width = width;\n    canvas.height = height;\n    const gradient = context.createRadialGradient(200, 200, 0, 200, 200, 200);\n    gradient.addColorStop(\"0\", \"magenta\");\n    gradient.addColorStop(\".25\", \"blue\");\n    gradient.addColorStop(\".50\", \"green\");\n    gradient.addColorStop(\".75\", \"yellow\");\n    gradient.addColorStop(\"1.0\", \"red\");\n    context.fillStyle = gradient;\n    context.fillRect(0, 0, width, height);\n    return canvas;\n})();\n\"\"\"\nApp() do session::Session\n    editor = CodeEditor(\"javascript\"; initial_source=src, width=800, height=300)\n    eval_button = Button(\"eval\")\n    output = DOM.div(DOM.span())\n    Bonito.onjs(session, eval_button.value, js\"\"\"function (click){\n        const js_src = $(editor.onchange).value;\n        const result = new Function(\"return \" + (js_src))()\n        let dom;\n        if (typeof result === 'object' && result.nodeName) {\n            dom = result\n        } else {\n            const span = document.createElement(\"span\")\n            span.innerText = result;\n            dom = span\n        }\n        Bonito.update_or_replace($(output), dom, false);\n        return\n    }\n    \"\"\")\n    notify(eval_button.value)\n    return DOM.div(editor, eval_button, output)\nend","category":"page"},{"location":"widgets.html#Tailwinddashboard","page":"Widgets","title":"Tailwinddashboard","text":"","category":"section"},{"location":"widgets.html","page":"Widgets","title":"Widgets","text":"Styles is preferred to style components, but Bonito also includes some Tailwind based components. They're from before Styles and will likely get removed in the future.","category":"page"},{"location":"widgets.html","page":"Widgets","title":"Widgets","text":"using Bonito\nimport Bonito.TailwindDashboard as D\n\nfunction range_slider(orientation)\n    range_slider = RangeSlider(1:100; value=[10, 80])\n    range_slider.tooltips[] = true\n    range_slider.ticks[] = Dict(\n        \"mode\" => \"range\",\n        \"density\" => 3\n    )\n    range_slider.orientation[] = orientation\n    return range_slider\nend\n\nApp() do\n\n    button = D.Button(\"click\")\n    textfield = D.TextField(\"type in your text\")\n    numberinput = D.NumberInput(0.0)\n    file_input = D.FileInput()\n    on(file_input.value) do file\n        @show file\n    end\n    slider = D.Slider(\"Test\", 1:5)\n\n    checkbox = D.Checkbox(\"check this\", true)\n    table = Bonito.Table([(a=22, b=33, c=44), (a=22, b=33, c=44)])\n\n    source = \"\"\"\n    function test(a, b)\n        return a + b\n    end\n    \"\"\"\n    editor = CodeEditor(\"julia\"; initial_source=source, width=250, height=200, scrollPastEnd=false)\n    dropdown = D.Dropdown(\"chose\", [\"option 1\", \"option 2\", \"option 3\"])\n\n    vrange_slider = range_slider(Bonito.WidgetsBase.vertical)\n\n    hrange_slider = range_slider(Bonito.WidgetsBase.horizontal)\n\n\n    return DOM.div(\n        D.Card.([\n            D.FlexRow(\n                D.Card(D.FlexCol(\n                    button,\n                    textfield,\n                    numberinput,\n                    dropdown,\n                    file_input,\n                    slider,\n                    checkbox,\n                    class=\"items-start\"\n                )),\n                D.Card(D.FlexCol(\n                    D.Card(DOM.div(vrange_slider; style=\"height: 200px; padding: 1px 50px\")),\n                    D.Card(DOM.div(hrange_slider; style=\"width: 200px; padding: 50px 1px\"),\n                    )),\n                )),\n            D.FlexRow(\n                D.Card.([\n\n                    D.Card(table; class=\"w-64\")\n                    editor\n                ])\n            ),\n        ])...\n    )\nend","category":"page"},{"location":"plotting.html#Plotting","page":"Plotting","title":"Plotting","text":"","category":"section"},{"location":"plotting.html","page":"Plotting","title":"Plotting","text":"All plotting frameworks overloading the Julia display system should work out of the box and all Javascript plotting libraries should be easy to integrate! The following example shows how to integrate popular libraries like Makie, Plotly and Gadfly.","category":"page"},{"location":"plotting.html","page":"Plotting","title":"Plotting","text":"using Bonito\nusing WGLMakie\nimport WGLMakie as W\nimport Gadfly as G\nimport PlotlyLight as PL\n\nPage() # required for multi cell output inside documenter\n\nfunction makie_plot()\n    N = 10\n    function xy_data(x, y)\n        r = sqrt(x^2 + y^2)\n        r == 0.0 ? 1.0f0 : (sin(r) / r)\n    end\n    l = range(-10, stop=10, length=N)\n    z = Float32[xy_data(x, y) for x in l, y in l]\n    W.surface(\n        -1 .. 1, -1 .. 1, z,\n        colormap=:Spectral,\n        figure=(; size=(300, 300))\n    )\nend\n\n# As far as I can tell, PlotlyLight doesn't handle require inside documenter correctly\n# So we just use Bonito to do it correctly via `Asset`:\nconst Plotly = Bonito.Asset(PL.cdn_url[])\nfunction Bonito.jsrender(session::Session, plot::PL.Plot)\n    # Pretty much copied from the PlotlyLight source to create the JS + div for creating the plot:\n    div = DOM.div(style=\"width: 300px;height: 300px;\")\n    src = js\"\"\"\n        Plotly.newPlot($(div), $(plot.data), $(plot.layout), $(plot.config))\n    \"\"\"\n    return Bonito.jsrender(session, DOM.div(Plotly, div, src))\nend\n\nApp() do\n    p = PL.Plot(\n        x=1:20, y=cumsum(randn(20)), type=\"scatter\", mode=\"lines+markers\";\n        layout=PL.Config(margin=PL.Config(l=20, r=20, t=20, b=20))\n    )\n    G.set_default_plot_size(300G.px, 300G.px)\n    gp = G.plot([sin, cos], 0, 2pi)\n    # The plots already leave lots of white space\n    PCard(p) = Card(p, padding=\"0px\", margin=\"0px\")\n    return Grid(\n        PCard(gp),\n        PCard(p),\n        PCard(makie_plot());\n        columns=\"repeat(auto-fit, minmax(300px, 1fr))\", justify_items=\"center\")\nend","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"Bonito.jl is a pretty simple package allowing you to render HTML and serve it from within Julia and build up a communication bridge with the Browser. This allows to combine any of your Julia applications with libraries like WGLMakie and create interactive Dashboards like this:","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"(Image: dashboard)","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"Bonito is tightly integrated with WGLMakie, which makes them a great pair for high performance, interactive visualizations. If performance is not a high priority, many other plotting/visualization libraries which overload the Julia display system should work with Bonito.jl as well.","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"Bonito.jl itself tries to stay out of major choices like the HTML/CSS/Javascript framework to use for creating UIs and Dashboards. Instead, it allows to create modular components and makes it easy to use any CSS/Javascript library.","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"It uses plain HTML widgets for UI elements where it can, and there are a few styleable components like Card, Grid, Row, Col to make it easy to create some more complex dashboards out of the box.","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"If you look at the source of those components, one will see that they're very simple and easy to create, which should help to create a rich ecosystem of extensions around Bonito.jl. Read more about it in Components.","category":"page"},{"location":"index.html#Quickstart","page":"Home","title":"Quickstart","text":"","category":"section"},{"location":"index.html","page":"Home","title":"Home","text":"using Bonito\nBonito.Page()","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"At the core of Bonito you have DOM to create any HTML tag, js\"...\" to run Javascript, and App to wrap your creation and serve it anywhere:","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"using Bonito\napp = App() do\n    return DOM.div(DOM.h1(\"hello world\"), js\"\"\"console.log('hello world')\"\"\")\nend","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"App has three main signatures:","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"# The main signatures, all other signatures will end up calling:\nApp((session, request) -> DOM.div(...))\n# Convenience constructors:\nApp((session::Session) -> DOM.div(...))\nApp((request::HTTP.Request) -> DOM.div(...))\nApp(() -> DOM.div(...))\nApp(DOM.div(...))","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"The app will be displayed by e.g. the VSCode plot pane, Jupyter/Pluto or any other framework that overloads the Julia display system for HTML display. In the REPL or an environment without an HTML ready display, a browser should open to display it (enabled explicitly via Bonito.browser_display()), but one can also serve the App very easily:","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"server = Server(app, \"0.0.0.0\", 8080)\n# This is the same as:\nserver = Server(\"0.0.0.0\", 8080)\nroute!(server, \"/\" => app)\n# So you can add many apps to one server, and even regexes are supported:\nroute!(server, r\"*\" => App(DOM.div(\"404, no content for this route\")))\nroute!(server, \"/some-app\" => App(DOM.div(\"app\")))","category":"page"},{"location":"index.html#Easy-integration-with-existing-JS-CSS-libraries","page":"Home","title":"Easy integration with existing JS + CSS libraries","text":"","category":"section"},{"location":"index.html","page":"Home","title":"Home","text":"It's quite easy to integrate existing Libraries into your Bonito App:","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"App() do\n    js = ES6Module(\"https://esm.sh/v133/leaflet@1.9.4/es2022/leaflet.mjs\")\n    css = Asset(\"https://unpkg.com/leaflet@1.9.4/dist/leaflet.css\")\n    map_div = DOM.div(id=\"map\"; style=\"height: 300px; width: 100%\")\n    return DOM.div(\n        css, map_div,\n        js\"\"\"\n        $(js).then(L=> {\n            const map = L.map('map').setView([51.505, -0.09], 13);\n            L.tileLayer('https://tile.openstreetmap.org/{z}/{x}/{y}.png').addTo(map);\n        })\n        \"\"\"\n    )\nend","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"Read more about wrapping libraries in Javascript.","category":"page"},{"location":"index.html#Deploying","page":"Home","title":"Deploying","text":"","category":"section"},{"location":"index.html","page":"Home","title":"Home","text":"Bonito.jl wants to run everywhere, from Notebooks, IDEs, Electron, to being directly inserted into existing web pages.","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"(Image: Bonito-wales)","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"Find out more about the different ways to serve your apps in Deployment.","category":"page"}]
}
